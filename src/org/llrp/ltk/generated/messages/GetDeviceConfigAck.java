/*
*
* This file was generated by LLRP Code Generator
* see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
* for more information
* Generated on: Mon Apr 10 16:16:14 CST 2017;
*
*/

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.messages;

import org.apache.log4j.Logger;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.parameters.AccessReportSpec;
import org.llrp.ltk.generated.parameters.AlarmConfiguration;
import org.llrp.ltk.generated.parameters.AntennaConfiguration;
import org.llrp.ltk.generated.parameters.AntennaProperties;
import org.llrp.ltk.generated.parameters.CommunicationConfiguration;
import org.llrp.ltk.generated.parameters.DeviceEventNotificationSpec;
import org.llrp.ltk.generated.parameters.Identification;
import org.llrp.ltk.generated.parameters.LocationConfiguration;
import org.llrp.ltk.generated.parameters.ModuleDepth;
import org.llrp.ltk.generated.parameters.SecurityModuleConfiguration;
import org.llrp.ltk.generated.parameters.SelectReportSpec;
import org.llrp.ltk.generated.parameters.Status;
import org.llrp.ltk.types.BitList;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.UnsignedInteger;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */
public class GetDeviceConfigAck extends LLRPMessage {
    public static final SignedShort TYPENUM = new SignedShort(661);
    private static final Logger LOGGER = Logger.getLogger(GetDeviceConfigAck.class);
    public static final String RESPONSETYPE = "";
    protected Status status;
    protected Identification identification;
    protected DeviceEventNotificationSpec deviceEventNotificationSpec;
    protected AlarmConfiguration alarmConfiguration;
    protected List<AntennaProperties> antennaPropertiesList = new LinkedList<AntennaProperties>();
    protected List<AntennaConfiguration> antennaConfigurationList = new LinkedList<AntennaConfiguration>();
    protected ModuleDepth moduleDepth;
    protected SelectReportSpec selectReportSpec;
    protected AccessReportSpec accessReportSpec;
    protected CommunicationConfiguration communicationConfiguration;
    protected LocationConfiguration locationConfiguration;
    protected SecurityModuleConfiguration securityModuleConfiguration;

    /**
     * empty constructor to create new message
     * with LLRP version set to 1.0 (0x1).
     */
    public GetDeviceConfigAck() {
        //		setVersion(new BitList(0,0,1));
        setVersion(new BitList(0, 0, 0, 0, 0, 0, 0, 1)); // change by wuwh 
    }

    /**
     * Constructor to create message from binary encoded message
     * calls decodeBinary to decode message.
     * @param list to be decoded
     */
    public GetDeviceConfigAck(final LLRPBitList list)
        throws InvalidLLRPMessageException {
        decodeBinary(list.toByteArray());
    }

    /**
     * Constructor to create message from binary encoded message
     * calls decodeBinary to decode message.
     * @param byteArray representing message
     */
    public GetDeviceConfigAck(final byte[] byteArray)
        throws InvalidLLRPMessageException {
        decodeBinary(byteArray);
    }

    /**
    * Constructor to create message from xml encoded message
    * calls decodeXML to decode message.
    * @param document to be decoded
    */
    public GetDeviceConfigAck(final Document document)
        throws InvalidLLRPMessageException {
        decodeXML(document);
    }

    /**
    * {@inheritDoc}
    */
    protected LLRPBitList encodeBinarySpecific()
        throws InvalidLLRPMessageException {
        LLRPBitList resultBits = new LLRPBitList();

        if (status == null) {
            // single parameter, may not be null
            LOGGER.warn(" status not set");
            throw new InvalidLLRPMessageException(" status not set");
        } else {
            resultBits.append(status.encodeBinary());
        }

        if (identification == null) {
            // optional parameter, may be null
            LOGGER.info(" identification not set");
        } else {
            resultBits.append(identification.encodeBinary());
        }

        if (deviceEventNotificationSpec == null) {
            // optional parameter, may be null
            LOGGER.info(" deviceEventNotificationSpec not set");
        } else {
            resultBits.append(deviceEventNotificationSpec.encodeBinary());
        }

        if (alarmConfiguration == null) {
            // optional parameter, may be null
            LOGGER.info(" alarmConfiguration not set");
        } else {
            resultBits.append(alarmConfiguration.encodeBinary());
        }

        if (antennaPropertiesList == null) {
            //just warn - it is optional 
            LOGGER.info(" antennaPropertiesList not set");
        } else {
            for (AntennaProperties field : antennaPropertiesList) {
                resultBits.append(field.encodeBinary());
            }
        }

        if (antennaConfigurationList == null) {
            //just warn - it is optional 
            LOGGER.info(" antennaConfigurationList not set");
        } else {
            for (AntennaConfiguration field : antennaConfigurationList) {
                resultBits.append(field.encodeBinary());
            }
        }

        if (moduleDepth == null) {
            // optional parameter, may be null
            LOGGER.info(" moduleDepth not set");
        } else {
            resultBits.append(moduleDepth.encodeBinary());
        }

        if (selectReportSpec == null) {
            // optional parameter, may be null
            LOGGER.info(" selectReportSpec not set");
        } else {
            resultBits.append(selectReportSpec.encodeBinary());
        }

        if (accessReportSpec == null) {
            // optional parameter, may be null
            LOGGER.info(" accessReportSpec not set");
        } else {
            resultBits.append(accessReportSpec.encodeBinary());
        }

        if (communicationConfiguration == null) {
            // optional parameter, may be null
            LOGGER.info(" communicationConfiguration not set");
        } else {
            resultBits.append(communicationConfiguration.encodeBinary());
        }

        if (locationConfiguration == null) {
            // optional parameter, may be null
            LOGGER.info(" locationConfiguration not set");
        } else {
            resultBits.append(locationConfiguration.encodeBinary());
        }

        if (securityModuleConfiguration == null) {
            // optional parameter, may be null
            LOGGER.info(" securityModuleConfiguration not set");
        } else {
            resultBits.append(securityModuleConfiguration.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Document encodeXML() throws InvalidLLRPMessageException {
        try {
            Namespace ns = Namespace.getNamespace("",
                    LLRPConstants.LLRPNAMESPACE);

            Element root = new Element("GetDeviceConfigAck", ns);
            //	Element root = new Element("GetDeviceConfigAck");
            root.addNamespaceDeclaration(Namespace.getNamespace("llrp",
                    LLRPConstants.LLRPNAMESPACE));

            if (version == null) {
                throw new InvalidLLRPMessageException("Version not set");
            } else {
                root.setAttribute("Version", version.toInteger().toString());
            }

            if (messageID == null) {
                throw new InvalidLLRPMessageException("MessageID not set");
            } else {
                root.setAttribute("MessageID", messageID.toString(10));
            }

            //parameters
            if (status == null) {
                LOGGER.info("status not set");
                throw new MissingParameterException("status not set");
            } else {
                root.addContent(status.encodeXML(status.getClass()
                                                       .getSimpleName(), ns));
            }

            if (identification == null) {
                LOGGER.info("identification not set");
            } else {
                root.addContent(identification.encodeXML(
                        identification.getClass().getSimpleName(), ns));
            }

            if (deviceEventNotificationSpec == null) {
                LOGGER.info("deviceEventNotificationSpec not set");
            } else {
                root.addContent(deviceEventNotificationSpec.encodeXML(
                        deviceEventNotificationSpec.getClass().getSimpleName(),
                        ns));
            }

            if (alarmConfiguration == null) {
                LOGGER.info("alarmConfiguration not set");
            } else {
                root.addContent(alarmConfiguration.encodeXML(
                        alarmConfiguration.getClass().getSimpleName(), ns));
            }

            if (antennaPropertiesList == null) {
                LOGGER.info("antennaPropertiesList not set");
            } else {
                for (AntennaProperties field : antennaPropertiesList) {
                    root.addContent(field.encodeXML(field.getClass().getName()
                                                         .replaceAll(field.getClass()
                                                                          .getPackage()
                                                                          .getName() +
                                ".", ""), ns));
                }
            }

            if (antennaConfigurationList == null) {
                LOGGER.info("antennaConfigurationList not set");
            } else {
                for (AntennaConfiguration field : antennaConfigurationList) {
                    root.addContent(field.encodeXML(field.getClass().getName()
                                                         .replaceAll(field.getClass()
                                                                          .getPackage()
                                                                          .getName() +
                                ".", ""), ns));
                }
            }

            if (moduleDepth == null) {
                LOGGER.info("moduleDepth not set");
            } else {
                root.addContent(moduleDepth.encodeXML(
                        moduleDepth.getClass().getSimpleName(), ns));
            }

            if (selectReportSpec == null) {
                LOGGER.info("selectReportSpec not set");
            } else {
                root.addContent(selectReportSpec.encodeXML(
                        selectReportSpec.getClass().getSimpleName(), ns));
            }

            if (accessReportSpec == null) {
                LOGGER.info("accessReportSpec not set");
            } else {
                root.addContent(accessReportSpec.encodeXML(
                        accessReportSpec.getClass().getSimpleName(), ns));
            }

            if (communicationConfiguration == null) {
                LOGGER.info("communicationConfiguration not set");
            } else {
                root.addContent(communicationConfiguration.encodeXML(
                        communicationConfiguration.getClass().getSimpleName(),
                        ns));
            }

            if (locationConfiguration == null) {
                LOGGER.info("locationConfiguration not set");
            } else {
                root.addContent(locationConfiguration.encodeXML(
                        locationConfiguration.getClass().getSimpleName(), ns));
            }

            if (securityModuleConfiguration == null) {
                LOGGER.info("securityModuleConfiguration not set");
            } else {
                root.addContent(securityModuleConfiguration.encodeXML(
                        securityModuleConfiguration.getClass().getSimpleName(),
                        ns));
            }

            Document doc = new Document(root);

            if (isValidXMLMessage(doc, LLRPConstants.LLRPMESSAGESCHEMAPATH)) {
                return doc;
            } else {
                return null;
            }
        } catch (IllegalArgumentException e) {
            throw new InvalidLLRPMessageException(e.getMessage());
        } catch (MissingParameterException e) {
            throw new InvalidLLRPMessageException(e.getMessage());
        }
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary)
        throws InvalidLLRPMessageException {
        int position = 0;
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.warn(
                "GetDeviceConfigAck misses non optional parameter of type Status");
            throw new InvalidLLRPMessageException(
                "GetDeviceConfigAck misses non optional parameter of type Status");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = status.length();
        }

        if ((type != null) && type.equals(Status.TYPENUM)) {
            status = new Status(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" status is instantiated with Status with length" +
                tempLength);
        } else {
            LOGGER.warn(
                "GetDeviceConfigAck misses non optional parameter of type Status");
            throw new InvalidLLRPMessageException(
                "GetDeviceConfigAck misses non optional parameter of type Status");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type Identification");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = identification.length();
        }

        if ((type != null) && type.equals(Identification.TYPENUM)) {
            identification = new Identification(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " identification is instantiated with Identification with length" +
                tempLength);
        } else {
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type Identification");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type DeviceEventNotificationSpec");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = deviceEventNotificationSpec.length();
        }

        if ((type != null) && type.equals(DeviceEventNotificationSpec.TYPENUM)) {
            deviceEventNotificationSpec = new DeviceEventNotificationSpec(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " deviceEventNotificationSpec is instantiated with DeviceEventNotificationSpec with length" +
                tempLength);
        } else {
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type DeviceEventNotificationSpec");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type AlarmConfiguration");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = alarmConfiguration.length();
        }

        if ((type != null) && type.equals(AlarmConfiguration.TYPENUM)) {
            alarmConfiguration = new AlarmConfiguration(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " alarmConfiguration is instantiated with AlarmConfiguration with length" +
                tempLength);
        } else {
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type AlarmConfiguration");
        }

        // list of parameters
        antennaPropertiesList = new LinkedList<AntennaProperties>();
        LOGGER.debug("decoding parameter antennaPropertiesList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //	tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(AntennaProperties.TYPENUM)) {
                //if first bit is 1 it is a TV Parameter
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = AntennaProperties.length();
                }

                antennaPropertiesList.add(new AntennaProperties(binary.subList(
                            position, tempLength)));
                LOGGER.debug(
                    "adding AntennaProperties to antennaPropertiesList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (antennaPropertiesList.isEmpty()) {
            LOGGER.info(
                "encoded message does not contain parameter for optional antennaPropertiesList");
        }

        // list of parameters
        antennaConfigurationList = new LinkedList<AntennaConfiguration>();
        LOGGER.debug("decoding parameter antennaConfigurationList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //	tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(AntennaConfiguration.TYPENUM)) {
                //if first bit is 1 it is a TV Parameter
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = AntennaConfiguration.length();
                }

                antennaConfigurationList.add(new AntennaConfiguration(
                        binary.subList(position, tempLength)));
                LOGGER.debug(
                    "adding AntennaConfiguration to antennaConfigurationList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (antennaConfigurationList.isEmpty()) {
            LOGGER.info(
                "encoded message does not contain parameter for optional antennaConfigurationList");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type ModuleDepth");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = moduleDepth.length();
        }

        if ((type != null) && type.equals(ModuleDepth.TYPENUM)) {
            moduleDepth = new ModuleDepth(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " moduleDepth is instantiated with ModuleDepth with length" +
                tempLength);
        } else {
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type ModuleDepth");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type SelectReportSpec");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = selectReportSpec.length();
        }

        if ((type != null) && type.equals(SelectReportSpec.TYPENUM)) {
            selectReportSpec = new SelectReportSpec(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " selectReportSpec is instantiated with SelectReportSpec with length" +
                tempLength);
        } else {
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type SelectReportSpec");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type AccessReportSpec");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = accessReportSpec.length();
        }

        if ((type != null) && type.equals(AccessReportSpec.TYPENUM)) {
            accessReportSpec = new AccessReportSpec(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " accessReportSpec is instantiated with AccessReportSpec with length" +
                tempLength);
        } else {
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type AccessReportSpec");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type CommunicationConfiguration");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = communicationConfiguration.length();
        }

        if ((type != null) && type.equals(CommunicationConfiguration.TYPENUM)) {
            communicationConfiguration = new CommunicationConfiguration(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " communicationConfiguration is instantiated with CommunicationConfiguration with length" +
                tempLength);
        } else {
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type CommunicationConfiguration");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type LocationConfiguration");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = locationConfiguration.length();
        }

        if ((type != null) && type.equals(LocationConfiguration.TYPENUM)) {
            locationConfiguration = new LocationConfiguration(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " locationConfiguration is instantiated with LocationConfiguration with length" +
                tempLength);
        } else {
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type LocationConfiguration");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type SecurityModuleConfiguration");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = securityModuleConfiguration.length();
        }

        if ((type != null) && type.equals(SecurityModuleConfiguration.TYPENUM)) {
            securityModuleConfiguration = new SecurityModuleConfiguration(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " securityModuleConfiguration is instantiated with SecurityModuleConfiguration with length" +
                tempLength);
        } else {
            LOGGER.info(
                "GetDeviceConfigAck misses optional parameter of type SecurityModuleConfiguration");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(final Document document)
        throws InvalidLLRPMessageException {
        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        try {
            isValidXMLMessage(document, LLRPConstants.LLRPMESSAGESCHEMAPATH);

            Element root = (Element) document.getRootElement().clone();
            List<Element> tempList = null;

            // the version field is always 3 bit long 
            // if the version attribute is not set in the LTK-XML message,
            // it is set to version 001
            String versionAttribute = root.getAttributeValue("Version");

            if (versionAttribute != null) {
                version = new BitList(8); //change by wuwh 3 to 8
                version.setValue(new Integer(versionAttribute));
            } else {
                version = new BitList(0, 0, 0, 0, 0, 0, 0, 1); //change by wuwh 
            }

            messageID = new UnsignedInteger(root.getAttributeValue("MessageID"));

            //parameter - not choices - no special actions needed
            temp = root.getChild("Status", ns);

            if (temp != null) {
                status = new Status(temp);
                LOGGER.info(
                    "setting parameter status for parameter GetDeviceConfigAck");
            } else {
                LOGGER.warn(
                    "GetDeviceConfigAck misses non optional parameter of type status");
                throw new MissingParameterException(
                    "GetDeviceConfigAck misses non optional parameter of type status");
            }

            root.removeChild("Status", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("Identification", ns);

            if (temp != null) {
                identification = new Identification(temp);
                LOGGER.info(
                    "setting parameter identification for parameter GetDeviceConfigAck");
            } else {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type identification");
            }

            root.removeChild("Identification", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("DeviceEventNotificationSpec", ns);

            if (temp != null) {
                deviceEventNotificationSpec = new DeviceEventNotificationSpec(temp);
                LOGGER.info(
                    "setting parameter deviceEventNotificationSpec for parameter GetDeviceConfigAck");
            } else {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type deviceEventNotificationSpec");
            }

            root.removeChild("DeviceEventNotificationSpec", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("AlarmConfiguration", ns);

            if (temp != null) {
                alarmConfiguration = new AlarmConfiguration(temp);
                LOGGER.info(
                    "setting parameter alarmConfiguration for parameter GetDeviceConfigAck");
            } else {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type alarmConfiguration");
            }

            root.removeChild("AlarmConfiguration", ns);
            //parameter - not choices - no special actions needed
            //we expect a list of parameters
            antennaPropertiesList = new LinkedList<AntennaProperties>();
            tempList = root.getChildren("AntennaProperties", ns);

            if ((tempList == null) || tempList.isEmpty()) {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type antennaPropertiesList");
            } else {
                for (Element e : tempList) {
                    antennaPropertiesList.add(new AntennaProperties(e));
                    LOGGER.debug(
                        "adding AntennaProperties to antennaPropertiesList ");
                }
            }

            root.removeChildren("AntennaProperties", ns);
            //parameter - not choices - no special actions needed
            //we expect a list of parameters
            antennaConfigurationList = new LinkedList<AntennaConfiguration>();
            tempList = root.getChildren("AntennaConfiguration", ns);

            if ((tempList == null) || tempList.isEmpty()) {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type antennaConfigurationList");
            } else {
                for (Element e : tempList) {
                    antennaConfigurationList.add(new AntennaConfiguration(e));
                    LOGGER.debug(
                        "adding AntennaConfiguration to antennaConfigurationList ");
                }
            }

            root.removeChildren("AntennaConfiguration", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("ModuleDepth", ns);

            if (temp != null) {
                moduleDepth = new ModuleDepth(temp);
                LOGGER.info(
                    "setting parameter moduleDepth for parameter GetDeviceConfigAck");
            } else {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type moduleDepth");
            }

            root.removeChild("ModuleDepth", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("SelectReportSpec", ns);

            if (temp != null) {
                selectReportSpec = new SelectReportSpec(temp);
                LOGGER.info(
                    "setting parameter selectReportSpec for parameter GetDeviceConfigAck");
            } else {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type selectReportSpec");
            }

            root.removeChild("SelectReportSpec", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("AccessReportSpec", ns);

            if (temp != null) {
                accessReportSpec = new AccessReportSpec(temp);
                LOGGER.info(
                    "setting parameter accessReportSpec for parameter GetDeviceConfigAck");
            } else {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type accessReportSpec");
            }

            root.removeChild("AccessReportSpec", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("CommunicationConfiguration", ns);

            if (temp != null) {
                communicationConfiguration = new CommunicationConfiguration(temp);
                LOGGER.info(
                    "setting parameter communicationConfiguration for parameter GetDeviceConfigAck");
            } else {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type communicationConfiguration");
            }

            root.removeChild("CommunicationConfiguration", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("LocationConfiguration", ns);

            if (temp != null) {
                locationConfiguration = new LocationConfiguration(temp);
                LOGGER.info(
                    "setting parameter locationConfiguration for parameter GetDeviceConfigAck");
            } else {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type locationConfiguration");
            }

            root.removeChild("LocationConfiguration", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("SecurityModuleConfiguration", ns);

            if (temp != null) {
                securityModuleConfiguration = new SecurityModuleConfiguration(temp);
                LOGGER.info(
                    "setting parameter securityModuleConfiguration for parameter GetDeviceConfigAck");
            } else {
                LOGGER.info(
                    "GetDeviceConfigAck misses optional parameter of type securityModuleConfiguration");
            }

            root.removeChild("SecurityModuleConfiguration", ns);

            if (root.getChildren().size() > 0) {
                String message = "GetDeviceConfigAck has unknown element " +
                    ((Element) root.getChildren().get(0)).getName();
                throw new InvalidLLRPMessageException(message);
            }
        } catch (IllegalArgumentException e) {
            throw new InvalidLLRPMessageException(e.getMessage());
        } catch (MissingParameterException e) {
            throw new InvalidLLRPMessageException(e.getMessage());
        }
    }

    //setters

    /**
    * set status of type Status.
    * @param  status to be set
    */
    public void setStatus(final Status status) {
        this.status = status;
    }

    /**
    * set identification of type Identification.
    * @param  identification to be set
    */
    public void setIdentification(final Identification identification) {
        this.identification = identification;
    }

    /**
    * set deviceEventNotificationSpec of type DeviceEventNotificationSpec.
    * @param  deviceEventNotificationSpec to be set
    */
    public void setDeviceEventNotificationSpec(
        final DeviceEventNotificationSpec deviceEventNotificationSpec) {
        this.deviceEventNotificationSpec = deviceEventNotificationSpec;
    }

    /**
    * set alarmConfiguration of type AlarmConfiguration.
    * @param  alarmConfiguration to be set
    */
    public void setAlarmConfiguration(
        final AlarmConfiguration alarmConfiguration) {
        this.alarmConfiguration = alarmConfiguration;
    }

    /**
    * set antennaPropertiesList of type  List &lt;AntennaProperties>.
    * @param  antennaPropertiesList to be set
    */
    public void setAntennaPropertiesList(
        final List<AntennaProperties> antennaPropertiesList) {
        this.antennaPropertiesList = antennaPropertiesList;
    }

    /**
    * set antennaConfigurationList of type  List &lt;AntennaConfiguration>.
    * @param  antennaConfigurationList to be set
    */
    public void setAntennaConfigurationList(
        final List<AntennaConfiguration> antennaConfigurationList) {
        this.antennaConfigurationList = antennaConfigurationList;
    }

    /**
    * set moduleDepth of type ModuleDepth.
    * @param  moduleDepth to be set
    */
    public void setModuleDepth(final ModuleDepth moduleDepth) {
        this.moduleDepth = moduleDepth;
    }

    /**
    * set selectReportSpec of type SelectReportSpec.
    * @param  selectReportSpec to be set
    */
    public void setSelectReportSpec(final SelectReportSpec selectReportSpec) {
        this.selectReportSpec = selectReportSpec;
    }

    /**
    * set accessReportSpec of type AccessReportSpec.
    * @param  accessReportSpec to be set
    */
    public void setAccessReportSpec(final AccessReportSpec accessReportSpec) {
        this.accessReportSpec = accessReportSpec;
    }

    /**
    * set communicationConfiguration of type CommunicationConfiguration.
    * @param  communicationConfiguration to be set
    */
    public void setCommunicationConfiguration(
        final CommunicationConfiguration communicationConfiguration) {
        this.communicationConfiguration = communicationConfiguration;
    }

    /**
    * set locationConfiguration of type LocationConfiguration.
    * @param  locationConfiguration to be set
    */
    public void setLocationConfiguration(
        final LocationConfiguration locationConfiguration) {
        this.locationConfiguration = locationConfiguration;
    }

    /**
    * set securityModuleConfiguration of type SecurityModuleConfiguration.
    * @param  securityModuleConfiguration to be set
    */
    public void setSecurityModuleConfiguration(
        final SecurityModuleConfiguration securityModuleConfiguration) {
        this.securityModuleConfiguration = securityModuleConfiguration;
    }

    // end setter

    //getters

    /**
    * get status of type Status .
    * @return  Status
    */
    public Status getStatus() {
        return status;
    }

    /**
    * get identification of type Identification .
    * @return  Identification
    */
    public Identification getIdentification() {
        return identification;
    }

    /**
    * get deviceEventNotificationSpec of type DeviceEventNotificationSpec .
    * @return  DeviceEventNotificationSpec
    */
    public DeviceEventNotificationSpec getDeviceEventNotificationSpec() {
        return deviceEventNotificationSpec;
    }

    /**
    * get alarmConfiguration of type AlarmConfiguration .
    * @return  AlarmConfiguration
    */
    public AlarmConfiguration getAlarmConfiguration() {
        return alarmConfiguration;
    }

    /**
    * get antennaPropertiesList of type List &lt;AntennaProperties> .
    * @return  List &lt;AntennaProperties>
    */
    public List<AntennaProperties> getAntennaPropertiesList() {
        return antennaPropertiesList;
    }

    /**
    * get antennaConfigurationList of type List &lt;AntennaConfiguration> .
    * @return  List &lt;AntennaConfiguration>
    */
    public List<AntennaConfiguration> getAntennaConfigurationList() {
        return antennaConfigurationList;
    }

    /**
    * get moduleDepth of type ModuleDepth .
    * @return  ModuleDepth
    */
    public ModuleDepth getModuleDepth() {
        return moduleDepth;
    }

    /**
    * get selectReportSpec of type SelectReportSpec .
    * @return  SelectReportSpec
    */
    public SelectReportSpec getSelectReportSpec() {
        return selectReportSpec;
    }

    /**
    * get accessReportSpec of type AccessReportSpec .
    * @return  AccessReportSpec
    */
    public AccessReportSpec getAccessReportSpec() {
        return accessReportSpec;
    }

    /**
    * get communicationConfiguration of type CommunicationConfiguration .
    * @return  CommunicationConfiguration
    */
    public CommunicationConfiguration getCommunicationConfiguration() {
        return communicationConfiguration;
    }

    /**
    * get locationConfiguration of type LocationConfiguration .
    * @return  LocationConfiguration
    */
    public LocationConfiguration getLocationConfiguration() {
        return locationConfiguration;
    }

    /**
    * get securityModuleConfiguration of type SecurityModuleConfiguration .
    * @return  SecurityModuleConfiguration
    */
    public SecurityModuleConfiguration getSecurityModuleConfiguration() {
        return securityModuleConfiguration;
    }

    // end getters

    //add methods

    /**
    * add element antennaProperties of type AntennaProperties .
    * @param  antennaProperties of type AntennaProperties
    */
    public void addToAntennaPropertiesList(AntennaProperties antennaProperties) {
        if (this.antennaPropertiesList == null) {
            this.antennaPropertiesList = new LinkedList<AntennaProperties>();
        }

        this.antennaPropertiesList.add(antennaProperties);
    }

    /**
    * add element antennaConfiguration of type AntennaConfiguration .
    * @param  antennaConfiguration of type AntennaConfiguration
    */
    public void addToAntennaConfigurationList(
        AntennaConfiguration antennaConfiguration) {
        if (this.antennaConfigurationList == null) {
            this.antennaConfigurationList = new LinkedList<AntennaConfiguration>();
        }

        this.antennaConfigurationList.add(antennaConfiguration);
    }

    // end add
    @Override
    public String getResponseType() {
        return RESPONSETYPE;
    }

    @Override
    public String getName() {
        return "GetDeviceConfigAck";
    }

    /**
    * return uniuque type number.
    * @return SignedShort holding unique type number
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }
}
