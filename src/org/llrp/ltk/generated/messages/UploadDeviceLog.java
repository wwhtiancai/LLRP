/*
*
* This file was generated by LLRP Code Generator
* see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
* for more information
* Generated on: Mon Apr 10 16:16:14 CST 2017;
*
*/

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.messages;

import org.apache.log4j.Logger;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.enumerations.UploadDeviceLogType;
import org.llrp.ltk.generated.parameters.EndLogTimestamp;
import org.llrp.ltk.generated.parameters.StartLogTimestamp;
import org.llrp.ltk.types.BitList;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.UnsignedInteger;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */
public class UploadDeviceLog extends LLRPMessage {
    public static final SignedShort TYPENUM = new SignedShort(640);
    private static final Logger LOGGER = Logger.getLogger(UploadDeviceLog.class);
    public static final String RESPONSETYPE = "UploadDeviceLogAck";
    protected UploadDeviceLogType uploadType;
    protected UnsignedInteger uploadCount;
    protected UnsignedInteger milliseconds;
    protected StartLogTimestamp startLogTimestamp;
    protected EndLogTimestamp endLogTimestamp;

    /**
     * empty constructor to create new message
     * with LLRP version set to 1.0 (0x1).
     */
    public UploadDeviceLog() {
        //		setVersion(new BitList(0,0,1));
        setVersion(new BitList(0, 0, 0, 0, 0, 0, 0, 1)); // change by wuwh 
    }

    /**
     * Constructor to create message from binary encoded message
     * calls decodeBinary to decode message.
     * @param list to be decoded
     */
    public UploadDeviceLog(final LLRPBitList list)
        throws InvalidLLRPMessageException {
        decodeBinary(list.toByteArray());
    }

    /**
     * Constructor to create message from binary encoded message
     * calls decodeBinary to decode message.
     * @param byteArray representing message
     */
    public UploadDeviceLog(final byte[] byteArray)
        throws InvalidLLRPMessageException {
        decodeBinary(byteArray);
    }

    /**
    * Constructor to create message from xml encoded message
    * calls decodeXML to decode message.
    * @param document to be decoded
    */
    public UploadDeviceLog(final Document document)
        throws InvalidLLRPMessageException {
        decodeXML(document);
    }

    /**
    * {@inheritDoc}
    */
    protected LLRPBitList encodeBinarySpecific()
        throws InvalidLLRPMessageException {
        LLRPBitList resultBits = new LLRPBitList();

        if (uploadType == null) {
            LOGGER.warn(" uploadType not set");
            throw new InvalidLLRPMessageException(
                " uploadType not set  for Parameter of Type UploadDeviceLog");
        }

        resultBits.append(uploadType.encodeBinary());

        if (uploadCount == null) {
            LOGGER.warn(" uploadCount not set");
            throw new InvalidLLRPMessageException(
                " uploadCount not set  for Parameter of Type UploadDeviceLog");
        }

        resultBits.append(uploadCount.encodeBinary());

        if (milliseconds == null) {
            LOGGER.warn(" milliseconds not set");
            throw new InvalidLLRPMessageException(
                " milliseconds not set  for Parameter of Type UploadDeviceLog");
        }

        resultBits.append(milliseconds.encodeBinary());

        if (startLogTimestamp == null) {
            // optional parameter, may be null
            LOGGER.info(" startLogTimestamp not set");
        } else {
            resultBits.append(startLogTimestamp.encodeBinary());
        }

        if (endLogTimestamp == null) {
            // optional parameter, may be null
            LOGGER.info(" endLogTimestamp not set");
        } else {
            resultBits.append(endLogTimestamp.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Document encodeXML() throws InvalidLLRPMessageException {
        try {
            Namespace ns = Namespace.getNamespace("",
                    LLRPConstants.LLRPNAMESPACE);

            Element root = new Element("UploadDeviceLog", ns);
            //	Element root = new Element("UploadDeviceLog");
            root.addNamespaceDeclaration(Namespace.getNamespace("llrp",
                    LLRPConstants.LLRPNAMESPACE));

            if (version == null) {
                throw new InvalidLLRPMessageException("Version not set");
            } else {
                root.setAttribute("Version", version.toInteger().toString());
            }

            if (messageID == null) {
                throw new InvalidLLRPMessageException("MessageID not set");
            } else {
                root.setAttribute("MessageID", messageID.toString(10));
            }

            if (uploadType == null) {
                LOGGER.warn(" uploadType not set");
                throw new MissingParameterException(" uploadType not set");
            } else {
                root.addContent(uploadType.encodeXML("UploadType", ns));
            }

            if (uploadCount == null) {
                LOGGER.warn(" uploadCount not set");
                throw new MissingParameterException(" uploadCount not set");
            } else {
                root.addContent(uploadCount.encodeXML("UploadCount", ns));
            }

            if (milliseconds == null) {
                LOGGER.warn(" milliseconds not set");
                throw new MissingParameterException(" milliseconds not set");
            } else {
                root.addContent(milliseconds.encodeXML("Milliseconds", ns));
            }

            //parameters
            if (startLogTimestamp == null) {
                LOGGER.info("startLogTimestamp not set");
            } else {
                root.addContent(startLogTimestamp.encodeXML(
                        startLogTimestamp.getClass().getSimpleName(), ns));
            }

            if (endLogTimestamp == null) {
                LOGGER.info("endLogTimestamp not set");
            } else {
                root.addContent(endLogTimestamp.encodeXML(
                        endLogTimestamp.getClass().getSimpleName(), ns));
            }

            Document doc = new Document(root);

            if (isValidXMLMessage(doc, LLRPConstants.LLRPMESSAGESCHEMAPATH)) {
                return doc;
            } else {
                return null;
            }
        } catch (IllegalArgumentException e) {
            throw new InvalidLLRPMessageException(e.getMessage());
        } catch (MissingParameterException e) {
            throw new InvalidLLRPMessageException(e.getMessage());
        }
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary)
        throws InvalidLLRPMessageException {
        int position = 0;
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        uploadType = new UploadDeviceLogType(binary.subList(position,
                    UploadDeviceLogType.length()));
        position += UploadDeviceLogType.length();
        uploadCount = new UnsignedInteger(binary.subList(position,
                    UnsignedInteger.length()));
        position += UnsignedInteger.length();
        milliseconds = new UnsignedInteger(binary.subList(position,
                    UnsignedInteger.length()));
        position += UnsignedInteger.length();

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "UploadDeviceLog misses optional parameter of type StartLogTimestamp");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = startLogTimestamp.length();
        }

        if ((type != null) && type.equals(StartLogTimestamp.TYPENUM)) {
            startLogTimestamp = new StartLogTimestamp(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " startLogTimestamp is instantiated with StartLogTimestamp with length" +
                tempLength);
        } else {
            LOGGER.info(
                "UploadDeviceLog misses optional parameter of type StartLogTimestamp");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                //type = new SignedShort(binary.subList(position+RESERVEDLENGTH, TYPENUMBERLENGTH));
                //tempByteLength = new UnsignedShort(binary.subList(position+RESERVEDLENGTH+ TYPENUMBERLENGTH, UnsignedShort.length())).toShort();			
                //tempLength=8*tempByteLength;
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh		
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "UploadDeviceLog misses optional parameter of type EndLogTimestamp");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = endLogTimestamp.length();
        }

        if ((type != null) && type.equals(EndLogTimestamp.TYPENUM)) {
            endLogTimestamp = new EndLogTimestamp(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " endLogTimestamp is instantiated with EndLogTimestamp with length" +
                tempLength);
        } else {
            LOGGER.info(
                "UploadDeviceLog misses optional parameter of type EndLogTimestamp");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(final Document document)
        throws InvalidLLRPMessageException {
        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        try {
            isValidXMLMessage(document, LLRPConstants.LLRPMESSAGESCHEMAPATH);

            Element root = (Element) document.getRootElement().clone();
            List<Element> tempList = null;

            // the version field is always 3 bit long 
            // if the version attribute is not set in the LTK-XML message,
            // it is set to version 001
            String versionAttribute = root.getAttributeValue("Version");

            if (versionAttribute != null) {
                version = new BitList(8); //change by wuwh 3 to 8
                version.setValue(new Integer(versionAttribute));
            } else {
                version = new BitList(0, 0, 0, 0, 0, 0, 0, 1); //change by wuwh 
            }

            messageID = new UnsignedInteger(root.getAttributeValue("MessageID"));
            temp = root.getChild("UploadType", root.getNamespace());

            //check if this element exist
            if (temp != null) {
                uploadType = new UploadDeviceLogType(temp);
            } else {
                LOGGER.warn(
                    "Element uploadType not provided in xml as child of " +
                    root.getName());
                throw new MissingParameterException(
                    "Element uploadType not provided");
            }

            root.removeChild("UploadType", root.getNamespace());
            temp = root.getChild("UploadCount", root.getNamespace());

            //check if this element exist
            if (temp != null) {
                uploadCount = new UnsignedInteger(temp);
            } else {
                LOGGER.warn(
                    "Element uploadCount not provided in xml as child of " +
                    root.getName());
                throw new MissingParameterException(
                    "Element uploadCount not provided");
            }

            root.removeChild("UploadCount", root.getNamespace());
            temp = root.getChild("Milliseconds", root.getNamespace());

            //check if this element exist
            if (temp != null) {
                milliseconds = new UnsignedInteger(temp);
            } else {
                LOGGER.warn(
                    "Element milliseconds not provided in xml as child of " +
                    root.getName());
                throw new MissingParameterException(
                    "Element milliseconds not provided");
            }

            root.removeChild("Milliseconds", root.getNamespace());

            //parameter - not choices - no special actions needed
            temp = root.getChild("StartLogTimestamp", ns);

            if (temp != null) {
                startLogTimestamp = new StartLogTimestamp(temp);
                LOGGER.info(
                    "setting parameter startLogTimestamp for parameter UploadDeviceLog");
            } else {
                LOGGER.info(
                    "UploadDeviceLog misses optional parameter of type startLogTimestamp");
            }

            root.removeChild("StartLogTimestamp", ns);
            //parameter - not choices - no special actions needed
            temp = root.getChild("EndLogTimestamp", ns);

            if (temp != null) {
                endLogTimestamp = new EndLogTimestamp(temp);
                LOGGER.info(
                    "setting parameter endLogTimestamp for parameter UploadDeviceLog");
            } else {
                LOGGER.info(
                    "UploadDeviceLog misses optional parameter of type endLogTimestamp");
            }

            root.removeChild("EndLogTimestamp", ns);

            if (root.getChildren().size() > 0) {
                String message = "UploadDeviceLog has unknown element " +
                    ((Element) root.getChildren().get(0)).getName();
                throw new InvalidLLRPMessageException(message);
            }
        } catch (IllegalArgumentException e) {
            throw new InvalidLLRPMessageException(e.getMessage());
        } catch (MissingParameterException e) {
            throw new InvalidLLRPMessageException(e.getMessage());
        }
    }

    //setters
    /**
    * set uploadType of type UploadDeviceLogType .
    * @param  uploadType to be set
    */
    public void setUploadType(final UploadDeviceLogType uploadType) {
        this.uploadType = uploadType;
    }

    /**
    * set   uploadCount of type UnsignedInteger .
    * @param   uploadCount to be set
    */
    public void setUploadCount(final UnsignedInteger uploadCount) {
        this.uploadCount = uploadCount;
    }

    /**
    * set   milliseconds of type UnsignedInteger .
    * @param   milliseconds to be set
    */
    public void setMilliseconds(final UnsignedInteger milliseconds) {
        this.milliseconds = milliseconds;
    }

    /**
    * set startLogTimestamp of type StartLogTimestamp.
    * @param  startLogTimestamp to be set
    */
    public void setStartLogTimestamp(final StartLogTimestamp startLogTimestamp) {
        this.startLogTimestamp = startLogTimestamp;
    }

    /**
    * set endLogTimestamp of type EndLogTimestamp.
    * @param  endLogTimestamp to be set
    */
    public void setEndLogTimestamp(final EndLogTimestamp endLogTimestamp) {
        this.endLogTimestamp = endLogTimestamp;
    }

    // end setter

    //getters
    /**
    * get uploadType of type UploadDeviceLogType.
    * @return  UploadDeviceLogType
    */
    public UploadDeviceLogType getUploadType() {
        return uploadType;
    }

    /**
    * get   uploadCount of type UnsignedInteger.
    * @return   type UnsignedInteger to be set
    */
    public UnsignedInteger getUploadCount() {
        return this.uploadCount;
    }

    /**
    * get   milliseconds of type UnsignedInteger.
    * @return   type UnsignedInteger to be set
    */
    public UnsignedInteger getMilliseconds() {
        return this.milliseconds;
    }

    /**
    * get startLogTimestamp of type StartLogTimestamp .
    * @return  StartLogTimestamp
    */
    public StartLogTimestamp getStartLogTimestamp() {
        return startLogTimestamp;
    }

    /**
    * get endLogTimestamp of type EndLogTimestamp .
    * @return  EndLogTimestamp
    */
    public EndLogTimestamp getEndLogTimestamp() {
        return endLogTimestamp;
    }

    // end getters

    //add methods

    // end add
    @Override
    public String getResponseType() {
        return RESPONSETYPE;
    }

    @Override
    public String getName() {
        return "UploadDeviceLog";
    }

    /**
    * return uniuque type number.
    * @return SignedShort holding unique type number
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }
}
