/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:16 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.enumerations.SelectReportTriggerType;
import org.llrp.ltk.generated.parameters.ReportDestination;
import org.llrp.ltk.types.Bit;
import org.llrp.ltk.types.BitList;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class SelectReportSpec extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(410);
    private static final Logger LOGGER = Logger.getLogger(SelectReportSpec.class);
    protected SelectReportTriggerType selectReportTrigger;
    protected UnsignedShort nValue;
    protected Bit enableSelectSpecID;
    protected Bit enableSpecIndex;
    protected Bit enableRfSpecID;
    protected Bit enableAntennaID;
    protected Bit enablePeakRSSI;
    protected Bit enableFirstSeenTimestamp;
    protected Bit enableLastSeenTimestamp;
    protected Bit enableTagSeenCount;
    protected Bit enableAccessSpecID;
    protected BitList reserved0 = new BitList(7);
    protected ReportDestination reportDestination;

    /**
     * empty constructor to create new parameter.
     */
    public SelectReportSpec() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public SelectReportSpec(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public SelectReportSpec(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (selectReportTrigger == null) {
            LOGGER.warn(" selectReportTrigger not set");
            throw new MissingParameterException(
                " selectReportTrigger not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(selectReportTrigger.encodeBinary());

        if (nValue == null) {
            LOGGER.warn(" nValue not set");
            throw new MissingParameterException(
                " nValue not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(nValue.encodeBinary());

        if (enableSelectSpecID == null) {
            LOGGER.warn(" enableSelectSpecID not set");
            throw new MissingParameterException(
                " enableSelectSpecID not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(enableSelectSpecID.encodeBinary());

        if (enableSpecIndex == null) {
            LOGGER.warn(" enableSpecIndex not set");
            throw new MissingParameterException(
                " enableSpecIndex not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(enableSpecIndex.encodeBinary());

        if (enableRfSpecID == null) {
            LOGGER.warn(" enableRfSpecID not set");
            throw new MissingParameterException(
                " enableRfSpecID not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(enableRfSpecID.encodeBinary());

        if (enableAntennaID == null) {
            LOGGER.warn(" enableAntennaID not set");
            throw new MissingParameterException(
                " enableAntennaID not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(enableAntennaID.encodeBinary());

        if (enablePeakRSSI == null) {
            LOGGER.warn(" enablePeakRSSI not set");
            throw new MissingParameterException(
                " enablePeakRSSI not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(enablePeakRSSI.encodeBinary());

        if (enableFirstSeenTimestamp == null) {
            LOGGER.warn(" enableFirstSeenTimestamp not set");
            throw new MissingParameterException(
                " enableFirstSeenTimestamp not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(enableFirstSeenTimestamp.encodeBinary());

        if (enableLastSeenTimestamp == null) {
            LOGGER.warn(" enableLastSeenTimestamp not set");
            throw new MissingParameterException(
                " enableLastSeenTimestamp not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(enableLastSeenTimestamp.encodeBinary());

        if (enableTagSeenCount == null) {
            LOGGER.warn(" enableTagSeenCount not set");
            throw new MissingParameterException(
                " enableTagSeenCount not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(enableTagSeenCount.encodeBinary());

        if (enableAccessSpecID == null) {
            LOGGER.warn(" enableAccessSpecID not set");
            throw new MissingParameterException(
                " enableAccessSpecID not set  for Parameter of Type SelectReportSpec");
        }

        resultBits.append(enableAccessSpecID.encodeBinary());
        resultBits.append(reserved0.encodeBinary());

        if (reportDestination == null) {
            // optional parameter, may be null
            LOGGER.info(" reportDestination not set");
        } else {
            resultBits.append(reportDestination.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (selectReportTrigger == null) {
            LOGGER.warn(" selectReportTrigger not set");
            throw new MissingParameterException(" selectReportTrigger not set");
        } else {
            element.addContent(selectReportTrigger.encodeXML(
                    "SelectReportTrigger", ns));
        }

        if (nValue == null) {
            LOGGER.warn(" nValue not set");
            throw new MissingParameterException(" nValue not set");
        } else {
            element.addContent(nValue.encodeXML("NValue", ns));
        }

        if (enableSelectSpecID == null) {
            LOGGER.warn(" enableSelectSpecID not set");
            throw new MissingParameterException(" enableSelectSpecID not set");
        } else {
            element.addContent(enableSelectSpecID.encodeXML(
                    "EnableSelectSpecID", ns));
        }

        if (enableSpecIndex == null) {
            LOGGER.warn(" enableSpecIndex not set");
            throw new MissingParameterException(" enableSpecIndex not set");
        } else {
            element.addContent(enableSpecIndex.encodeXML("EnableSpecIndex", ns));
        }

        if (enableRfSpecID == null) {
            LOGGER.warn(" enableRfSpecID not set");
            throw new MissingParameterException(" enableRfSpecID not set");
        } else {
            element.addContent(enableRfSpecID.encodeXML("EnableRfSpecID", ns));
        }

        if (enableAntennaID == null) {
            LOGGER.warn(" enableAntennaID not set");
            throw new MissingParameterException(" enableAntennaID not set");
        } else {
            element.addContent(enableAntennaID.encodeXML("EnableAntennaID", ns));
        }

        if (enablePeakRSSI == null) {
            LOGGER.warn(" enablePeakRSSI not set");
            throw new MissingParameterException(" enablePeakRSSI not set");
        } else {
            element.addContent(enablePeakRSSI.encodeXML("EnablePeakRSSI", ns));
        }

        if (enableFirstSeenTimestamp == null) {
            LOGGER.warn(" enableFirstSeenTimestamp not set");
            throw new MissingParameterException(
                " enableFirstSeenTimestamp not set");
        } else {
            element.addContent(enableFirstSeenTimestamp.encodeXML(
                    "EnableFirstSeenTimestamp", ns));
        }

        if (enableLastSeenTimestamp == null) {
            LOGGER.warn(" enableLastSeenTimestamp not set");
            throw new MissingParameterException(
                " enableLastSeenTimestamp not set");
        } else {
            element.addContent(enableLastSeenTimestamp.encodeXML(
                    "EnableLastSeenTimestamp", ns));
        }

        if (enableTagSeenCount == null) {
            LOGGER.warn(" enableTagSeenCount not set");
            throw new MissingParameterException(" enableTagSeenCount not set");
        } else {
            element.addContent(enableTagSeenCount.encodeXML(
                    "EnableTagSeenCount", ns));
        }

        if (enableAccessSpecID == null) {
            LOGGER.warn(" enableAccessSpecID not set");
            throw new MissingParameterException(" enableAccessSpecID not set");
        } else {
            element.addContent(enableAccessSpecID.encodeXML(
                    "EnableAccessSpecID", ns));
        }

        //element.addContent(reserved0.encodeXML("reserved",ns));
        //parameters
        if (reportDestination == null) {
            LOGGER.info("reportDestination not set");
        } else {
            element.addContent(reportDestination.encodeXML(
                    reportDestination.getClass().getSimpleName(), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        selectReportTrigger = new SelectReportTriggerType(binary.subList(
                    position, SelectReportTriggerType.length()));
        position += SelectReportTriggerType.length();
        nValue = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length()));
        position += UnsignedShort.length();
        enableSelectSpecID = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        enableSpecIndex = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        enableRfSpecID = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        enableAntennaID = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        enablePeakRSSI = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        enableFirstSeenTimestamp = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        enableLastSeenTimestamp = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        enableTagSeenCount = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        enableAccessSpecID = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        position += reserved0.length();

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "SelectReportSpec misses optional parameter of type ReportDestination");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = reportDestination.length();
        }

        if ((type != null) && type.equals(ReportDestination.TYPENUM)) {
            reportDestination = new ReportDestination(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " reportDestination is instantiated with ReportDestination with length" +
                tempLength);
        } else {
            LOGGER.info(
                "SelectReportSpec misses optional parameter of type ReportDestination");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("SelectReportTrigger", ns);

        if (temp != null) {
            selectReportTrigger = new SelectReportTriggerType(temp);
        }

        element.removeChild("SelectReportTrigger", ns);
        temp = element.getChild("NValue", ns);

        if (temp != null) {
            nValue = new UnsignedShort(temp);
        }

        element.removeChild("NValue", ns);
        temp = element.getChild("EnableSelectSpecID", ns);

        if (temp != null) {
            enableSelectSpecID = new Bit(temp);
        }

        element.removeChild("EnableSelectSpecID", ns);
        temp = element.getChild("EnableSpecIndex", ns);

        if (temp != null) {
            enableSpecIndex = new Bit(temp);
        }

        element.removeChild("EnableSpecIndex", ns);
        temp = element.getChild("EnableRfSpecID", ns);

        if (temp != null) {
            enableRfSpecID = new Bit(temp);
        }

        element.removeChild("EnableRfSpecID", ns);
        temp = element.getChild("EnableAntennaID", ns);

        if (temp != null) {
            enableAntennaID = new Bit(temp);
        }

        element.removeChild("EnableAntennaID", ns);
        temp = element.getChild("EnablePeakRSSI", ns);

        if (temp != null) {
            enablePeakRSSI = new Bit(temp);
        }

        element.removeChild("EnablePeakRSSI", ns);
        temp = element.getChild("EnableFirstSeenTimestamp", ns);

        if (temp != null) {
            enableFirstSeenTimestamp = new Bit(temp);
        }

        element.removeChild("EnableFirstSeenTimestamp", ns);
        temp = element.getChild("EnableLastSeenTimestamp", ns);

        if (temp != null) {
            enableLastSeenTimestamp = new Bit(temp);
        }

        element.removeChild("EnableLastSeenTimestamp", ns);
        temp = element.getChild("EnableTagSeenCount", ns);

        if (temp != null) {
            enableTagSeenCount = new Bit(temp);
        }

        element.removeChild("EnableTagSeenCount", ns);
        temp = element.getChild("EnableAccessSpecID", ns);

        if (temp != null) {
            enableAccessSpecID = new Bit(temp);
        }

        element.removeChild("EnableAccessSpecID", ns);

        //parameter - not choices - no special actions needed
        temp = element.getChild("ReportDestination", ns);

        if (temp != null) {
            reportDestination = new ReportDestination(temp);
            LOGGER.info(
                "setting parameter reportDestination for parameter SelectReportSpec");
        }

        if (temp == null) {
            LOGGER.info(
                "SelectReportSpec misses optional parameter of type reportDestination");
        }

        element.removeChild("ReportDestination", ns);

        if (element.getChildren().size() > 0) {
            String message = "SelectReportSpec has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set selectReportTrigger of type SelectReportTriggerType .
    * @param  selectReportTrigger to be set
    */
    public void setSelectReportTrigger(
        final SelectReportTriggerType selectReportTrigger) {
        this.selectReportTrigger = selectReportTrigger;
    }

    /**
    * set   nValue of type UnsignedShort .
    * @param   nValue to be set
    */
    public void setNValue(final UnsignedShort nValue) {
        this.nValue = nValue;
    }

    /**
    * set   enableSelectSpecID of type Bit .
    * @param   enableSelectSpecID to be set
    */
    public void setEnableSelectSpecID(final Bit enableSelectSpecID) {
        this.enableSelectSpecID = enableSelectSpecID;
    }

    /**
    * set   enableSpecIndex of type Bit .
    * @param   enableSpecIndex to be set
    */
    public void setEnableSpecIndex(final Bit enableSpecIndex) {
        this.enableSpecIndex = enableSpecIndex;
    }

    /**
    * set   enableRfSpecID of type Bit .
    * @param   enableRfSpecID to be set
    */
    public void setEnableRfSpecID(final Bit enableRfSpecID) {
        this.enableRfSpecID = enableRfSpecID;
    }

    /**
    * set   enableAntennaID of type Bit .
    * @param   enableAntennaID to be set
    */
    public void setEnableAntennaID(final Bit enableAntennaID) {
        this.enableAntennaID = enableAntennaID;
    }

    /**
    * set   enablePeakRSSI of type Bit .
    * @param   enablePeakRSSI to be set
    */
    public void setEnablePeakRSSI(final Bit enablePeakRSSI) {
        this.enablePeakRSSI = enablePeakRSSI;
    }

    /**
    * set   enableFirstSeenTimestamp of type Bit .
    * @param   enableFirstSeenTimestamp to be set
    */
    public void setEnableFirstSeenTimestamp(final Bit enableFirstSeenTimestamp) {
        this.enableFirstSeenTimestamp = enableFirstSeenTimestamp;
    }

    /**
    * set   enableLastSeenTimestamp of type Bit .
    * @param   enableLastSeenTimestamp to be set
    */
    public void setEnableLastSeenTimestamp(final Bit enableLastSeenTimestamp) {
        this.enableLastSeenTimestamp = enableLastSeenTimestamp;
    }

    /**
    * set   enableTagSeenCount of type Bit .
    * @param   enableTagSeenCount to be set
    */
    public void setEnableTagSeenCount(final Bit enableTagSeenCount) {
        this.enableTagSeenCount = enableTagSeenCount;
    }

    /**
    * set   enableAccessSpecID of type Bit .
    * @param   enableAccessSpecID to be set
    */
    public void setEnableAccessSpecID(final Bit enableAccessSpecID) {
        this.enableAccessSpecID = enableAccessSpecID;
    }

    /**
    * set reportDestination of type ReportDestination.
    * @param  reportDestination to be set
    */
    public void setReportDestination(final ReportDestination reportDestination) {
        this.reportDestination = reportDestination;
    }

    // end setter

    //getters
    /**
    * get selectReportTrigger of type SelectReportTriggerType.
    * @return  SelectReportTriggerType
    */
    public SelectReportTriggerType getSelectReportTrigger() {
        return selectReportTrigger;
    }

    /**
    * get   nValue of type UnsignedShort.
    * @return   type UnsignedShort to be set
    */
    public UnsignedShort getNValue() {
        return this.nValue;
    }

    /**
    * get   enableSelectSpecID of type Bit.
    * @return   type Bit to be set
    */
    public Bit getEnableSelectSpecID() {
        return this.enableSelectSpecID;
    }

    /**
    * get   enableSpecIndex of type Bit.
    * @return   type Bit to be set
    */
    public Bit getEnableSpecIndex() {
        return this.enableSpecIndex;
    }

    /**
    * get   enableRfSpecID of type Bit.
    * @return   type Bit to be set
    */
    public Bit getEnableRfSpecID() {
        return this.enableRfSpecID;
    }

    /**
    * get   enableAntennaID of type Bit.
    * @return   type Bit to be set
    */
    public Bit getEnableAntennaID() {
        return this.enableAntennaID;
    }

    /**
    * get   enablePeakRSSI of type Bit.
    * @return   type Bit to be set
    */
    public Bit getEnablePeakRSSI() {
        return this.enablePeakRSSI;
    }

    /**
    * get   enableFirstSeenTimestamp of type Bit.
    * @return   type Bit to be set
    */
    public Bit getEnableFirstSeenTimestamp() {
        return this.enableFirstSeenTimestamp;
    }

    /**
    * get   enableLastSeenTimestamp of type Bit.
    * @return   type Bit to be set
    */
    public Bit getEnableLastSeenTimestamp() {
        return this.enableLastSeenTimestamp;
    }

    /**
    * get   enableTagSeenCount of type Bit.
    * @return   type Bit to be set
    */
    public Bit getEnableTagSeenCount() {
        return this.enableTagSeenCount;
    }

    /**
    * get   enableAccessSpecID of type Bit.
    * @return   type Bit to be set
    */
    public Bit getEnableAccessSpecID() {
        return this.enableAccessSpecID;
    }

    /**
    * get reportDestination of type ReportDestination .
    * @return  ReportDestination
    */
    public ReportDestination getReportDestination() {
        return reportDestination;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "SelectReportSpec";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "SelectReportSpec: ";
        result += ", selectReportTrigger: ";
        result += selectReportTrigger;
        result += ", nValue: ";
        result += nValue;
        result += ", enableSelectSpecID: ";
        result += enableSelectSpecID;
        result += ", enableSpecIndex: ";
        result += enableSpecIndex;
        result += ", enableRfSpecID: ";
        result += enableRfSpecID;
        result += ", enableAntennaID: ";
        result += enableAntennaID;
        result += ", enablePeakRSSI: ";
        result += enablePeakRSSI;
        result += ", enableFirstSeenTimestamp: ";
        result += enableFirstSeenTimestamp;
        result += ", enableLastSeenTimestamp: ";
        result += enableLastSeenTimestamp;
        result += ", enableTagSeenCount: ";
        result += enableTagSeenCount;
        result += ", enableAccessSpecID: ";
        result += enableAccessSpecID;

        result = result.replaceFirst(", ", "");

        return result;
    }
}
