/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:18 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.enumerations.AlarmReportLevel;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UTF8String_UTF_8;
import org.llrp.ltk.types.UnsignedInteger;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class AlarmReportInfo extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(720);
    private static final Logger LOGGER = Logger.getLogger(AlarmReportInfo.class);
    protected UnsignedInteger alarmReportCode;
    protected UnsignedInteger alarmReportReason;
    protected AlarmReportLevel alarmReportLevel;
    protected UnsignedInteger alarmReportSeconds;
    protected UTF8String_UTF_8 alarmReportDescription;

    /**
     * empty constructor to create new parameter.
     */
    public AlarmReportInfo() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public AlarmReportInfo(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public AlarmReportInfo(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (alarmReportCode == null) {
            LOGGER.warn(" alarmReportCode not set");
            throw new MissingParameterException(
                " alarmReportCode not set  for Parameter of Type AlarmReportInfo");
        }

        resultBits.append(alarmReportCode.encodeBinary());

        if (alarmReportReason == null) {
            LOGGER.warn(" alarmReportReason not set");
            throw new MissingParameterException(
                " alarmReportReason not set  for Parameter of Type AlarmReportInfo");
        }

        resultBits.append(alarmReportReason.encodeBinary());

        if (alarmReportLevel == null) {
            LOGGER.warn(" alarmReportLevel not set");
            throw new MissingParameterException(
                " alarmReportLevel not set  for Parameter of Type AlarmReportInfo");
        }

        resultBits.append(alarmReportLevel.encodeBinary());

        if (alarmReportSeconds == null) {
            LOGGER.warn(" alarmReportSeconds not set");
            throw new MissingParameterException(
                " alarmReportSeconds not set  for Parameter of Type AlarmReportInfo");
        }

        resultBits.append(alarmReportSeconds.encodeBinary());

        if (alarmReportDescription == null) {
            LOGGER.warn(" alarmReportDescription not set");
            throw new MissingParameterException(
                " alarmReportDescription not set  for Parameter of Type AlarmReportInfo");
        }

        resultBits.append(alarmReportDescription.encodeBinary());

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (alarmReportCode == null) {
            LOGGER.warn(" alarmReportCode not set");
            throw new MissingParameterException(" alarmReportCode not set");
        } else {
            element.addContent(alarmReportCode.encodeXML("AlarmReportCode", ns));
        }

        if (alarmReportReason == null) {
            LOGGER.warn(" alarmReportReason not set");
            throw new MissingParameterException(" alarmReportReason not set");
        } else {
            element.addContent(alarmReportReason.encodeXML(
                    "AlarmReportReason", ns));
        }

        if (alarmReportLevel == null) {
            LOGGER.warn(" alarmReportLevel not set");
            throw new MissingParameterException(" alarmReportLevel not set");
        } else {
            element.addContent(alarmReportLevel.encodeXML("AlarmReportLevel", ns));
        }

        if (alarmReportSeconds == null) {
            LOGGER.warn(" alarmReportSeconds not set");
            throw new MissingParameterException(" alarmReportSeconds not set");
        } else {
            element.addContent(alarmReportSeconds.encodeXML(
                    "AlarmReportSeconds", ns));
        }

        if (alarmReportDescription == null) {
            LOGGER.warn(" alarmReportDescription not set");
            throw new MissingParameterException(
                " alarmReportDescription not set");
        } else {
            element.addContent(alarmReportDescription.encodeXML(
                    "AlarmReportDescription", ns));
        }

        //parameters
        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        alarmReportCode = new UnsignedInteger(binary.subList(position,
                    UnsignedInteger.length()));
        position += UnsignedInteger.length();
        alarmReportReason = new UnsignedInteger(binary.subList(position,
                    UnsignedInteger.length()));
        position += UnsignedInteger.length();
        alarmReportLevel = new AlarmReportLevel(binary.subList(position,
                    AlarmReportLevel.length()));
        position += AlarmReportLevel.length();
        alarmReportSeconds = new UnsignedInteger(binary.subList(position,
                    UnsignedInteger.length()));
        position += UnsignedInteger.length();
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UTF8String_UTF_8.length() * fieldCount) +
            UnsignedShort.length();
        alarmReportDescription = new UTF8String_UTF_8(binary.subList(position,
                    tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UTF8String_UTF_8 with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for alarmReportDescription ");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("AlarmReportCode", ns);

        if (temp != null) {
            alarmReportCode = new UnsignedInteger(temp);
        }

        element.removeChild("AlarmReportCode", ns);
        temp = element.getChild("AlarmReportReason", ns);

        if (temp != null) {
            alarmReportReason = new UnsignedInteger(temp);
        }

        element.removeChild("AlarmReportReason", ns);
        temp = element.getChild("AlarmReportLevel", ns);

        if (temp != null) {
            alarmReportLevel = new AlarmReportLevel(temp);
        }

        element.removeChild("AlarmReportLevel", ns);
        temp = element.getChild("AlarmReportSeconds", ns);

        if (temp != null) {
            alarmReportSeconds = new UnsignedInteger(temp);
        }

        element.removeChild("AlarmReportSeconds", ns);
        temp = element.getChild("AlarmReportDescription", ns);

        if (temp != null) {
            alarmReportDescription = new UTF8String_UTF_8(temp);
        }

        element.removeChild("AlarmReportDescription", ns);

        if (element.getChildren().size() > 0) {
            String message = "AlarmReportInfo has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   alarmReportCode of type UnsignedInteger .
    * @param   alarmReportCode to be set
    */
    public void setAlarmReportCode(final UnsignedInteger alarmReportCode) {
        this.alarmReportCode = alarmReportCode;
    }

    /**
    * set   alarmReportReason of type UnsignedInteger .
    * @param   alarmReportReason to be set
    */
    public void setAlarmReportReason(final UnsignedInteger alarmReportReason) {
        this.alarmReportReason = alarmReportReason;
    }

    /**
    * set alarmReportLevel of type AlarmReportLevel .
    * @param  alarmReportLevel to be set
    */
    public void setAlarmReportLevel(final AlarmReportLevel alarmReportLevel) {
        this.alarmReportLevel = alarmReportLevel;
    }

    /**
    * set   alarmReportSeconds of type UnsignedInteger .
    * @param   alarmReportSeconds to be set
    */
    public void setAlarmReportSeconds(final UnsignedInteger alarmReportSeconds) {
        this.alarmReportSeconds = alarmReportSeconds;
    }

    /**
    * set alarmReportDescription of type UTF8String_UTF_8 .
    * @param  alarmReportDescription to be set
    */
    public void setAlarmReportDescription(
        final UTF8String_UTF_8 alarmReportDescription) {
        this.alarmReportDescription = alarmReportDescription;
    }

    // end setter

    //getters
    /**
    * get   alarmReportCode of type UnsignedInteger.
    * @return   type UnsignedInteger to be set
    */
    public UnsignedInteger getAlarmReportCode() {
        return this.alarmReportCode;
    }

    /**
    * get   alarmReportReason of type UnsignedInteger.
    * @return   type UnsignedInteger to be set
    */
    public UnsignedInteger getAlarmReportReason() {
        return this.alarmReportReason;
    }

    /**
    * get alarmReportLevel of type AlarmReportLevel.
    * @return  AlarmReportLevel
    */
    public AlarmReportLevel getAlarmReportLevel() {
        return alarmReportLevel;
    }

    /**
    * get   alarmReportSeconds of type UnsignedInteger.
    * @return   type UnsignedInteger to be set
    */
    public UnsignedInteger getAlarmReportSeconds() {
        return this.alarmReportSeconds;
    }

    /**
    * get alarmReportDescription of type  UTF8String_UTF_8.
    * @return  UTF8String_UTF_8
    */
    public UTF8String_UTF_8 getAlarmReportDescription() {
        return alarmReportDescription;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "AlarmReportInfo";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "AlarmReportInfo: ";
        result += ", alarmReportCode: ";
        result += alarmReportCode;
        result += ", alarmReportReason: ";
        result += alarmReportReason;
        result += ", alarmReportLevel: ";
        result += alarmReportLevel;
        result += ", alarmReportSeconds: ";
        result += alarmReportSeconds;
        result += ", alarmReportDescription: ";
        result += alarmReportDescription;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
