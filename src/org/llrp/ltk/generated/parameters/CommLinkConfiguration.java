/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:18 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.enumerations.CommLinkType;
import org.llrp.ltk.generated.parameters.HttpLinkConfiguration;
import org.llrp.ltk.generated.parameters.KeepaliveSpec;
import org.llrp.ltk.generated.parameters.SerialLinkConfiguration;
import org.llrp.ltk.generated.parameters.TcpLinkConfiguration;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class CommLinkConfiguration extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(669);
    private static final Logger LOGGER = Logger.getLogger(CommLinkConfiguration.class);
    protected CommLinkType linkType;
    protected KeepaliveSpec keepaliveSpec;
    protected TcpLinkConfiguration tcpLinkConfiguration;
    protected SerialLinkConfiguration serialLinkConfiguration;
    protected HttpLinkConfiguration httpLinkConfiguration;

    /**
     * empty constructor to create new parameter.
     */
    public CommLinkConfiguration() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public CommLinkConfiguration(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public CommLinkConfiguration(Element element)
        throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (linkType == null) {
            LOGGER.warn(" linkType not set");
            throw new MissingParameterException(
                " linkType not set  for Parameter of Type CommLinkConfiguration");
        }

        resultBits.append(linkType.encodeBinary());

        if (keepaliveSpec == null) {
            // single parameter, may not be null
            LOGGER.warn(" keepaliveSpec not set");
            throw new MissingParameterException(" keepaliveSpec not set");
        } else {
            resultBits.append(keepaliveSpec.encodeBinary());
        }

        if (tcpLinkConfiguration == null) {
            // optional parameter, may be null
            LOGGER.info(" tcpLinkConfiguration not set");
        } else {
            resultBits.append(tcpLinkConfiguration.encodeBinary());
        }

        if (serialLinkConfiguration == null) {
            // optional parameter, may be null
            LOGGER.info(" serialLinkConfiguration not set");
        } else {
            resultBits.append(serialLinkConfiguration.encodeBinary());
        }

        if (httpLinkConfiguration == null) {
            // optional parameter, may be null
            LOGGER.info(" httpLinkConfiguration not set");
        } else {
            resultBits.append(httpLinkConfiguration.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (linkType == null) {
            LOGGER.warn(" linkType not set");
            throw new MissingParameterException(" linkType not set");
        } else {
            element.addContent(linkType.encodeXML("LinkType", ns));
        }

        //parameters
        if (keepaliveSpec == null) {
            LOGGER.info("keepaliveSpec not set");
            throw new MissingParameterException("keepaliveSpec not set");
        } else {
            element.addContent(keepaliveSpec.encodeXML(
                    keepaliveSpec.getClass().getSimpleName(), ns));
        }

        if (tcpLinkConfiguration == null) {
            LOGGER.info("tcpLinkConfiguration not set");
        } else {
            element.addContent(tcpLinkConfiguration.encodeXML(
                    tcpLinkConfiguration.getClass().getSimpleName(), ns));
        }

        if (serialLinkConfiguration == null) {
            LOGGER.info("serialLinkConfiguration not set");
        } else {
            element.addContent(serialLinkConfiguration.encodeXML(
                    serialLinkConfiguration.getClass().getSimpleName(), ns));
        }

        if (httpLinkConfiguration == null) {
            LOGGER.info("httpLinkConfiguration not set");
        } else {
            element.addContent(httpLinkConfiguration.encodeXML(
                    httpLinkConfiguration.getClass().getSimpleName(), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        linkType = new CommLinkType(binary.subList(position,
                    CommLinkType.length()));
        position += CommLinkType.length();

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.warn(
                "CommLinkConfiguration misses non optional parameter of type KeepaliveSpec");
            throw new MissingParameterException(
                "CommLinkConfiguration misses non optional parameter of type KeepaliveSpec");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = keepaliveSpec.length();
        }

        if ((type != null) && type.equals(KeepaliveSpec.TYPENUM)) {
            keepaliveSpec = new KeepaliveSpec(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " keepaliveSpec is instantiated with KeepaliveSpec with length" +
                tempLength);
        } else {
            LOGGER.warn(
                "CommLinkConfiguration misses non optional parameter of type KeepaliveSpec");
            throw new MissingParameterException(
                "CommLinkConfiguration misses non optional parameter of type KeepaliveSpec");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "CommLinkConfiguration misses optional parameter of type TcpLinkConfiguration");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = tcpLinkConfiguration.length();
        }

        if ((type != null) && type.equals(TcpLinkConfiguration.TYPENUM)) {
            tcpLinkConfiguration = new TcpLinkConfiguration(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " tcpLinkConfiguration is instantiated with TcpLinkConfiguration with length" +
                tempLength);
        } else {
            LOGGER.info(
                "CommLinkConfiguration misses optional parameter of type TcpLinkConfiguration");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "CommLinkConfiguration misses optional parameter of type SerialLinkConfiguration");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = serialLinkConfiguration.length();
        }

        if ((type != null) && type.equals(SerialLinkConfiguration.TYPENUM)) {
            serialLinkConfiguration = new SerialLinkConfiguration(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " serialLinkConfiguration is instantiated with SerialLinkConfiguration with length" +
                tempLength);
        } else {
            LOGGER.info(
                "CommLinkConfiguration misses optional parameter of type SerialLinkConfiguration");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "CommLinkConfiguration misses optional parameter of type HttpLinkConfiguration");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = httpLinkConfiguration.length();
        }

        if ((type != null) && type.equals(HttpLinkConfiguration.TYPENUM)) {
            httpLinkConfiguration = new HttpLinkConfiguration(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " httpLinkConfiguration is instantiated with HttpLinkConfiguration with length" +
                tempLength);
        } else {
            LOGGER.info(
                "CommLinkConfiguration misses optional parameter of type HttpLinkConfiguration");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("LinkType", ns);

        if (temp != null) {
            linkType = new CommLinkType(temp);
        }

        element.removeChild("LinkType", ns);

        //parameter - not choices - no special actions needed
        temp = element.getChild("KeepaliveSpec", ns);

        if (temp != null) {
            keepaliveSpec = new KeepaliveSpec(temp);
            LOGGER.info(
                "setting parameter keepaliveSpec for parameter CommLinkConfiguration");
        }

        if (temp == null) {
            LOGGER.warn(
                "CommLinkConfiguration misses non optional parameter of type keepaliveSpec");
            throw new MissingParameterException(
                "CommLinkConfiguration misses non optional parameter of type keepaliveSpec");
        }

        element.removeChild("KeepaliveSpec", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("TcpLinkConfiguration", ns);

        if (temp != null) {
            tcpLinkConfiguration = new TcpLinkConfiguration(temp);
            LOGGER.info(
                "setting parameter tcpLinkConfiguration for parameter CommLinkConfiguration");
        }

        if (temp == null) {
            LOGGER.info(
                "CommLinkConfiguration misses optional parameter of type tcpLinkConfiguration");
        }

        element.removeChild("TcpLinkConfiguration", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("SerialLinkConfiguration", ns);

        if (temp != null) {
            serialLinkConfiguration = new SerialLinkConfiguration(temp);
            LOGGER.info(
                "setting parameter serialLinkConfiguration for parameter CommLinkConfiguration");
        }

        if (temp == null) {
            LOGGER.info(
                "CommLinkConfiguration misses optional parameter of type serialLinkConfiguration");
        }

        element.removeChild("SerialLinkConfiguration", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("HttpLinkConfiguration", ns);

        if (temp != null) {
            httpLinkConfiguration = new HttpLinkConfiguration(temp);
            LOGGER.info(
                "setting parameter httpLinkConfiguration for parameter CommLinkConfiguration");
        }

        if (temp == null) {
            LOGGER.info(
                "CommLinkConfiguration misses optional parameter of type httpLinkConfiguration");
        }

        element.removeChild("HttpLinkConfiguration", ns);

        if (element.getChildren().size() > 0) {
            String message = "CommLinkConfiguration has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set linkType of type CommLinkType .
    * @param  linkType to be set
    */
    public void setLinkType(final CommLinkType linkType) {
        this.linkType = linkType;
    }

    /**
    * set keepaliveSpec of type KeepaliveSpec.
    * @param  keepaliveSpec to be set
    */
    public void setKeepaliveSpec(final KeepaliveSpec keepaliveSpec) {
        this.keepaliveSpec = keepaliveSpec;
    }

    /**
    * set tcpLinkConfiguration of type TcpLinkConfiguration.
    * @param  tcpLinkConfiguration to be set
    */
    public void setTcpLinkConfiguration(
        final TcpLinkConfiguration tcpLinkConfiguration) {
        this.tcpLinkConfiguration = tcpLinkConfiguration;
    }

    /**
    * set serialLinkConfiguration of type SerialLinkConfiguration.
    * @param  serialLinkConfiguration to be set
    */
    public void setSerialLinkConfiguration(
        final SerialLinkConfiguration serialLinkConfiguration) {
        this.serialLinkConfiguration = serialLinkConfiguration;
    }

    /**
    * set httpLinkConfiguration of type HttpLinkConfiguration.
    * @param  httpLinkConfiguration to be set
    */
    public void setHttpLinkConfiguration(
        final HttpLinkConfiguration httpLinkConfiguration) {
        this.httpLinkConfiguration = httpLinkConfiguration;
    }

    // end setter

    //getters
    /**
    * get linkType of type CommLinkType.
    * @return  CommLinkType
    */
    public CommLinkType getLinkType() {
        return linkType;
    }

    /**
    * get keepaliveSpec of type KeepaliveSpec .
    * @return  KeepaliveSpec
    */
    public KeepaliveSpec getKeepaliveSpec() {
        return keepaliveSpec;
    }

    /**
    * get tcpLinkConfiguration of type TcpLinkConfiguration .
    * @return  TcpLinkConfiguration
    */
    public TcpLinkConfiguration getTcpLinkConfiguration() {
        return tcpLinkConfiguration;
    }

    /**
    * get serialLinkConfiguration of type SerialLinkConfiguration .
    * @return  SerialLinkConfiguration
    */
    public SerialLinkConfiguration getSerialLinkConfiguration() {
        return serialLinkConfiguration;
    }

    /**
    * get httpLinkConfiguration of type HttpLinkConfiguration .
    * @return  HttpLinkConfiguration
    */
    public HttpLinkConfiguration getHttpLinkConfiguration() {
        return httpLinkConfiguration;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "CommLinkConfiguration";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "CommLinkConfiguration: ";
        result += ", linkType: ";
        result += linkType;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
