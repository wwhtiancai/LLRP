/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:17 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.parameters.CCRQ;
import org.llrp.ltk.generated.parameters.CID;
import org.llrp.ltk.generated.parameters.CLLX;
import org.llrp.ltk.generated.parameters.CSYS;
import org.llrp.ltk.generated.parameters.FPDH;
import org.llrp.ltk.generated.parameters.GL;
import org.llrp.ltk.generated.parameters.HPHMXH;
import org.llrp.ltk.generated.parameters.HPZL;
import org.llrp.ltk.generated.parameters.JYYXQ;
import org.llrp.ltk.generated.parameters.PL;
import org.llrp.ltk.generated.parameters.QZBFQ;
import org.llrp.ltk.generated.parameters.SYXZ;
import org.llrp.ltk.generated.parameters.ZKZL;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class ReadDataInfo extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(516);
    private static final Logger LOGGER = Logger.getLogger(ReadDataInfo.class);
    protected CID cID;
    protected FPDH fPDH;
    protected SYXZ sYXZ;
    protected CCRQ cCRQ;
    protected CLLX cLLX;
    protected PL pL;
    protected GL gL;
    protected HPZL hPZL;
    protected HPHMXH hPHMXH;
    protected JYYXQ jYYXQ;
    protected QZBFQ qZBFQ;
    protected CSYS cSYS;
    protected ZKZL zKZL;

    /**
     * empty constructor to create new parameter.
     */
    public ReadDataInfo() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public ReadDataInfo(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public ReadDataInfo(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (cID == null) {
            // optional parameter, may be null
            LOGGER.info(" cID not set");
        } else {
            resultBits.append(cID.encodeBinary());
        }

        if (fPDH == null) {
            // optional parameter, may be null
            LOGGER.info(" fPDH not set");
        } else {
            resultBits.append(fPDH.encodeBinary());
        }

        if (sYXZ == null) {
            // optional parameter, may be null
            LOGGER.info(" sYXZ not set");
        } else {
            resultBits.append(sYXZ.encodeBinary());
        }

        if (cCRQ == null) {
            // optional parameter, may be null
            LOGGER.info(" cCRQ not set");
        } else {
            resultBits.append(cCRQ.encodeBinary());
        }

        if (cLLX == null) {
            // optional parameter, may be null
            LOGGER.info(" cLLX not set");
        } else {
            resultBits.append(cLLX.encodeBinary());
        }

        if (pL == null) {
            // optional parameter, may be null
            LOGGER.info(" pL not set");
        } else {
            resultBits.append(pL.encodeBinary());
        }

        if (gL == null) {
            // optional parameter, may be null
            LOGGER.info(" gL not set");
        } else {
            resultBits.append(gL.encodeBinary());
        }

        if (hPZL == null) {
            // optional parameter, may be null
            LOGGER.info(" hPZL not set");
        } else {
            resultBits.append(hPZL.encodeBinary());
        }

        if (hPHMXH == null) {
            // optional parameter, may be null
            LOGGER.info(" hPHMXH not set");
        } else {
            resultBits.append(hPHMXH.encodeBinary());
        }

        if (jYYXQ == null) {
            // optional parameter, may be null
            LOGGER.info(" jYYXQ not set");
        } else {
            resultBits.append(jYYXQ.encodeBinary());
        }

        if (qZBFQ == null) {
            // optional parameter, may be null
            LOGGER.info(" qZBFQ not set");
        } else {
            resultBits.append(qZBFQ.encodeBinary());
        }

        if (cSYS == null) {
            // optional parameter, may be null
            LOGGER.info(" cSYS not set");
        } else {
            resultBits.append(cSYS.encodeBinary());
        }

        if (zKZL == null) {
            // optional parameter, may be null
            LOGGER.info(" zKZL not set");
        } else {
            resultBits.append(zKZL.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        //parameters
        if (cID == null) {
            LOGGER.info("cID not set");
        } else {
            element.addContent(cID.encodeXML(cID.getClass().getSimpleName(), ns));
        }

        if (fPDH == null) {
            LOGGER.info("fPDH not set");
        } else {
            element.addContent(fPDH.encodeXML(fPDH.getClass().getSimpleName(),
                    ns));
        }

        if (sYXZ == null) {
            LOGGER.info("sYXZ not set");
        } else {
            element.addContent(sYXZ.encodeXML(sYXZ.getClass().getSimpleName(),
                    ns));
        }

        if (cCRQ == null) {
            LOGGER.info("cCRQ not set");
        } else {
            element.addContent(cCRQ.encodeXML(cCRQ.getClass().getSimpleName(),
                    ns));
        }

        if (cLLX == null) {
            LOGGER.info("cLLX not set");
        } else {
            element.addContent(cLLX.encodeXML(cLLX.getClass().getSimpleName(),
                    ns));
        }

        if (pL == null) {
            LOGGER.info("pL not set");
        } else {
            element.addContent(pL.encodeXML(pL.getClass().getSimpleName(), ns));
        }

        if (gL == null) {
            LOGGER.info("gL not set");
        } else {
            element.addContent(gL.encodeXML(gL.getClass().getSimpleName(), ns));
        }

        if (hPZL == null) {
            LOGGER.info("hPZL not set");
        } else {
            element.addContent(hPZL.encodeXML(hPZL.getClass().getSimpleName(),
                    ns));
        }

        if (hPHMXH == null) {
            LOGGER.info("hPHMXH not set");
        } else {
            element.addContent(hPHMXH.encodeXML(hPHMXH.getClass().getSimpleName(),
                    ns));
        }

        if (jYYXQ == null) {
            LOGGER.info("jYYXQ not set");
        } else {
            element.addContent(jYYXQ.encodeXML(jYYXQ.getClass().getSimpleName(),
                    ns));
        }

        if (qZBFQ == null) {
            LOGGER.info("qZBFQ not set");
        } else {
            element.addContent(qZBFQ.encodeXML(qZBFQ.getClass().getSimpleName(),
                    ns));
        }

        if (cSYS == null) {
            LOGGER.info("cSYS not set");
        } else {
            element.addContent(cSYS.encodeXML(cSYS.getClass().getSimpleName(),
                    ns));
        }

        if (zKZL == null) {
            LOGGER.info("zKZL not set");
        } else {
            element.addContent(zKZL.encodeXML(zKZL.getClass().getSimpleName(),
                    ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type CID");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = cID.length();
        }

        if ((type != null) && type.equals(CID.TYPENUM)) {
            cID = new CID(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" cID is instantiated with CID with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type CID");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type FPDH");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = fPDH.length();
        }

        if ((type != null) && type.equals(FPDH.TYPENUM)) {
            fPDH = new FPDH(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" fPDH is instantiated with FPDH with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type FPDH");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type SYXZ");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = sYXZ.length();
        }

        if ((type != null) && type.equals(SYXZ.TYPENUM)) {
            sYXZ = new SYXZ(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" sYXZ is instantiated with SYXZ with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type SYXZ");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type CCRQ");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = cCRQ.length();
        }

        if ((type != null) && type.equals(CCRQ.TYPENUM)) {
            cCRQ = new CCRQ(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" cCRQ is instantiated with CCRQ with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type CCRQ");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type CLLX");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = cLLX.length();
        }

        if ((type != null) && type.equals(CLLX.TYPENUM)) {
            cLLX = new CLLX(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" cLLX is instantiated with CLLX with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type CLLX");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type PL");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = pL.length();
        }

        if ((type != null) && type.equals(PL.TYPENUM)) {
            pL = new PL(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" pL is instantiated with PL with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type PL");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type GL");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = gL.length();
        }

        if ((type != null) && type.equals(GL.TYPENUM)) {
            gL = new GL(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" gL is instantiated with GL with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type GL");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type HPZL");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = hPZL.length();
        }

        if ((type != null) && type.equals(HPZL.TYPENUM)) {
            hPZL = new HPZL(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" hPZL is instantiated with HPZL with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type HPZL");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type HPHMXH");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = hPHMXH.length();
        }

        if ((type != null) && type.equals(HPHMXH.TYPENUM)) {
            hPHMXH = new HPHMXH(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" hPHMXH is instantiated with HPHMXH with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type HPHMXH");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type JYYXQ");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = jYYXQ.length();
        }

        if ((type != null) && type.equals(JYYXQ.TYPENUM)) {
            jYYXQ = new JYYXQ(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" jYYXQ is instantiated with JYYXQ with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type JYYXQ");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type QZBFQ");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = qZBFQ.length();
        }

        if ((type != null) && type.equals(QZBFQ.TYPENUM)) {
            qZBFQ = new QZBFQ(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" qZBFQ is instantiated with QZBFQ with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type QZBFQ");
        }

     // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type ZKZL");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = cSYS.length();
        }

        if ((type != null) && type.equals(CSYS.TYPENUM)) {
            cSYS = new CSYS(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" cSYS is instantiated with CSYS with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type CSYS");
        }
        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info("ReadDataInfo misses optional parameter of type CSYS");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = zKZL.length();
        }
        
        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = zKZL.length();
        }
        if ((type != null) && type.equals(ZKZL.TYPENUM)) {
            zKZL = new ZKZL(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" zKZL is instantiated with ZKZL with length" +
                tempLength);
        } else {
            LOGGER.info("ReadDataInfo misses optional parameter of type ZKZL");
        }
        
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        //parameter - not choices - no special actions needed
        temp = element.getChild("CID", ns);

        if (temp != null) {
            cID = new CID(temp);
            LOGGER.info("setting parameter cID for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type cID");
        }

        element.removeChild("CID", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("FPDH", ns);

        if (temp != null) {
            fPDH = new FPDH(temp);
            LOGGER.info("setting parameter fPDH for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type fPDH");
        }

        element.removeChild("FPDH", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("SYXZ", ns);

        if (temp != null) {
            sYXZ = new SYXZ(temp);
            LOGGER.info("setting parameter sYXZ for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type sYXZ");
        }

        element.removeChild("SYXZ", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("CCRQ", ns);

        if (temp != null) {
            cCRQ = new CCRQ(temp);
            LOGGER.info("setting parameter cCRQ for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type cCRQ");
        }

        element.removeChild("CCRQ", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("CLLX", ns);

        if (temp != null) {
            cLLX = new CLLX(temp);
            LOGGER.info("setting parameter cLLX for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type cLLX");
        }

        element.removeChild("CLLX", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("PL", ns);

        if (temp != null) {
            pL = new PL(temp);
            LOGGER.info("setting parameter pL for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type pL");
        }

        element.removeChild("PL", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("GL", ns);

        if (temp != null) {
            gL = new GL(temp);
            LOGGER.info("setting parameter gL for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type gL");
        }

        element.removeChild("GL", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("HPZL", ns);

        if (temp != null) {
            hPZL = new HPZL(temp);
            LOGGER.info("setting parameter hPZL for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type hPZL");
        }

        element.removeChild("HPZL", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("HPHMXH", ns);

        if (temp != null) {
            hPHMXH = new HPHMXH(temp);
            LOGGER.info("setting parameter hPHMXH for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type hPHMXH");
        }

        element.removeChild("HPHMXH", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("JYYXQ", ns);

        if (temp != null) {
            jYYXQ = new JYYXQ(temp);
            LOGGER.info("setting parameter jYYXQ for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type jYYXQ");
        }

        element.removeChild("JYYXQ", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("QZBFQ", ns);

        if (temp != null) {
            qZBFQ = new QZBFQ(temp);
            LOGGER.info("setting parameter qZBFQ for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type qZBFQ");
        }

        element.removeChild("QZBFQ", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("CSYS", ns);

        if (temp != null) {
            cSYS = new CSYS(temp);
            LOGGER.info("setting parameter cSYS for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type cSYS");
        }

        element.removeChild("CSYS", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("ZKZL", ns);

        if (temp != null) {
            zKZL = new ZKZL(temp);
            LOGGER.info("setting parameter zKZL for parameter ReadDataInfo");
        }

        if (temp == null) {
            LOGGER.info("ReadDataInfo misses optional parameter of type zKZL");
        }

        element.removeChild("ZKZL", ns);

        if (element.getChildren().size() > 0) {
            String message = "ReadDataInfo has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters

    /**
    * set cID of type CID.
    * @param  cID to be set
    */
    public void setCID(final CID cID) {
        this.cID = cID;
    }

    /**
    * set fPDH of type FPDH.
    * @param  fPDH to be set
    */
    public void setFPDH(final FPDH fPDH) {
        this.fPDH = fPDH;
    }

    /**
    * set sYXZ of type SYXZ.
    * @param  sYXZ to be set
    */
    public void setSYXZ(final SYXZ sYXZ) {
        this.sYXZ = sYXZ;
    }

    /**
    * set cCRQ of type CCRQ.
    * @param  cCRQ to be set
    */
    public void setCCRQ(final CCRQ cCRQ) {
        this.cCRQ = cCRQ;
    }

    /**
    * set cLLX of type CLLX.
    * @param  cLLX to be set
    */
    public void setCLLX(final CLLX cLLX) {
        this.cLLX = cLLX;
    }

    /**
    * set pL of type PL.
    * @param  pL to be set
    */
    public void setPL(final PL pL) {
        this.pL = pL;
    }

    /**
    * set gL of type GL.
    * @param  gL to be set
    */
    public void setGL(final GL gL) {
        this.gL = gL;
    }

    /**
    * set hPZL of type HPZL.
    * @param  hPZL to be set
    */
    public void setHPZL(final HPZL hPZL) {
        this.hPZL = hPZL;
    }

    /**
    * set hPHMXH of type HPHMXH.
    * @param  hPHMXH to be set
    */
    public void setHPHMXH(final HPHMXH hPHMXH) {
        this.hPHMXH = hPHMXH;
    }

    /**
    * set jYYXQ of type JYYXQ.
    * @param  jYYXQ to be set
    */
    public void setJYYXQ(final JYYXQ jYYXQ) {
        this.jYYXQ = jYYXQ;
    }

    /**
    * set qZBFQ of type QZBFQ.
    * @param  qZBFQ to be set
    */
    public void setQZBFQ(final QZBFQ qZBFQ) {
        this.qZBFQ = qZBFQ;
    }

    /**
    * set cSYS of type CSYS.
    * @param  cSYS to be set
    */
    public void setCSYS(final CSYS cSYS) {
        this.cSYS = cSYS;
    }

    /**
    * set zKZL of type ZKZL.
    * @param  zKZL to be set
    */
    public void setZKZL(final ZKZL zKZL) {
        this.zKZL = zKZL;
    }

    // end setter

    //getters

    /**
    * get cID of type CID .
    * @return  CID
    */
    public CID getCID() {
        return cID;
    }

    /**
    * get fPDH of type FPDH .
    * @return  FPDH
    */
    public FPDH getFPDH() {
        return fPDH;
    }

    /**
    * get sYXZ of type SYXZ .
    * @return  SYXZ
    */
    public SYXZ getSYXZ() {
        return sYXZ;
    }

    /**
    * get cCRQ of type CCRQ .
    * @return  CCRQ
    */
    public CCRQ getCCRQ() {
        return cCRQ;
    }

    /**
    * get cLLX of type CLLX .
    * @return  CLLX
    */
    public CLLX getCLLX() {
        return cLLX;
    }

    /**
    * get pL of type PL .
    * @return  PL
    */
    public PL getPL() {
        return pL;
    }

    /**
    * get gL of type GL .
    * @return  GL
    */
    public GL getGL() {
        return gL;
    }

    /**
    * get hPZL of type HPZL .
    * @return  HPZL
    */
    public HPZL getHPZL() {
        return hPZL;
    }

    /**
    * get hPHMXH of type HPHMXH .
    * @return  HPHMXH
    */
    public HPHMXH getHPHMXH() {
        return hPHMXH;
    }

    /**
    * get jYYXQ of type JYYXQ .
    * @return  JYYXQ
    */
    public JYYXQ getJYYXQ() {
        return jYYXQ;
    }

    /**
    * get qZBFQ of type QZBFQ .
    * @return  QZBFQ
    */
    public QZBFQ getQZBFQ() {
        return qZBFQ;
    }

    /**
    * get cSYS of type CSYS .
    * @return  CSYS
    */
    public CSYS getCSYS() {
        return cSYS;
    }

    /**
    * get zKZL of type ZKZL .
    * @return  ZKZL
    */
    public ZKZL getZKZL() {
        return zKZL;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "ReadDataInfo";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "ReadDataInfo: ";
        result = result.replaceFirst(", ", "");

        return result;
    }
}
