/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:18 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.interfaces.EthernetConfiguration;
import org.llrp.ltk.types.Bit;
import org.llrp.ltk.types.BitList;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedByte;
import org.llrp.ltk.types.UnsignedIntegerArray;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class EthernetIpv6Configuration extends TLVParameter
    implements EthernetConfiguration {
    public static final SignedShort TYPENUM = new SignedShort(678);
    private static final Logger LOGGER = Logger.getLogger(EthernetIpv6Configuration.class);
    protected UnsignedByte ifIndex;
    protected UnsignedIntegerArray iPAddress;
    protected UnsignedByte iPMask;
    protected UnsignedIntegerArray gateWayAddr;
    protected UnsignedIntegerArray dNSAddr;
    protected Bit isDHCP;
    protected BitList reserved0 = new BitList(7);

    /**
     * empty constructor to create new parameter.
     */
    public EthernetIpv6Configuration() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public EthernetIpv6Configuration(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public EthernetIpv6Configuration(Element element)
        throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (ifIndex == null) {
            LOGGER.warn(" ifIndex not set");
            throw new MissingParameterException(
                " ifIndex not set  for Parameter of Type EthernetIpv6Configuration");
        }

        resultBits.append(ifIndex.encodeBinary());

        if (iPAddress == null) {
            LOGGER.warn(" iPAddress not set");
            throw new MissingParameterException(
                " iPAddress not set  for Parameter of Type EthernetIpv6Configuration");
        }

        resultBits.append(iPAddress.encodeBinary());

        if (iPMask == null) {
            LOGGER.warn(" iPMask not set");
            throw new MissingParameterException(
                " iPMask not set  for Parameter of Type EthernetIpv6Configuration");
        }

        resultBits.append(iPMask.encodeBinary());

        if (gateWayAddr == null) {
            LOGGER.warn(" gateWayAddr not set");
            throw new MissingParameterException(
                " gateWayAddr not set  for Parameter of Type EthernetIpv6Configuration");
        }

        resultBits.append(gateWayAddr.encodeBinary());

        if (dNSAddr == null) {
            LOGGER.warn(" dNSAddr not set");
            throw new MissingParameterException(
                " dNSAddr not set  for Parameter of Type EthernetIpv6Configuration");
        }

        resultBits.append(dNSAddr.encodeBinary());

        if (isDHCP == null) {
            LOGGER.warn(" isDHCP not set");
            throw new MissingParameterException(
                " isDHCP not set  for Parameter of Type EthernetIpv6Configuration");
        }

        resultBits.append(isDHCP.encodeBinary());
        resultBits.append(reserved0.encodeBinary());

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (ifIndex == null) {
            LOGGER.warn(" ifIndex not set");
            throw new MissingParameterException(" ifIndex not set");
        } else {
            element.addContent(ifIndex.encodeXML("IfIndex", ns));
        }

        if (iPAddress == null) {
            LOGGER.warn(" iPAddress not set");
            throw new MissingParameterException(" iPAddress not set");
        } else {
            element.addContent(iPAddress.encodeXML("IPAddress", ns));
        }

        if (iPMask == null) {
            LOGGER.warn(" iPMask not set");
            throw new MissingParameterException(" iPMask not set");
        } else {
            element.addContent(iPMask.encodeXML("IPMask", ns));
        }

        if (gateWayAddr == null) {
            LOGGER.warn(" gateWayAddr not set");
            throw new MissingParameterException(" gateWayAddr not set");
        } else {
            element.addContent(gateWayAddr.encodeXML("GateWayAddr", ns));
        }

        if (dNSAddr == null) {
            LOGGER.warn(" dNSAddr not set");
            throw new MissingParameterException(" dNSAddr not set");
        } else {
            element.addContent(dNSAddr.encodeXML("DNSAddr", ns));
        }

        if (isDHCP == null) {
            LOGGER.warn(" isDHCP not set");
            throw new MissingParameterException(" isDHCP not set");
        } else {
            element.addContent(isDHCP.encodeXML("IsDHCP", ns));
        }

        //element.addContent(reserved0.encodeXML("reserved",ns));
        //parameters
        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        ifIndex = new UnsignedByte(binary.subList(position,
                    UnsignedByte.length()));
        position += UnsignedByte.length();
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedIntegerArray.length() * fieldCount) +
            UnsignedShort.length();
        iPAddress = new UnsignedIntegerArray(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedIntegerArray with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for iPAddress ");
        }

        iPMask = new UnsignedByte(binary.subList(position, UnsignedByte.length()));
        position += UnsignedByte.length();
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedIntegerArray.length() * fieldCount) +
            UnsignedShort.length();
        gateWayAddr = new UnsignedIntegerArray(binary.subList(position,
                    tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedIntegerArray with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for gateWayAddr ");
        }

        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedIntegerArray.length() * fieldCount) +
            UnsignedShort.length();
        dNSAddr = new UnsignedIntegerArray(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedIntegerArray with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for dNSAddr ");
        }

        isDHCP = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        position += reserved0.length();
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("IfIndex", ns);

        if (temp != null) {
            ifIndex = new UnsignedByte(temp);
        }

        element.removeChild("IfIndex", ns);
        temp = element.getChild("IPAddress", ns);

        if (temp != null) {
            iPAddress = new UnsignedIntegerArray(temp);
        }

        element.removeChild("IPAddress", ns);
        temp = element.getChild("IPMask", ns);

        if (temp != null) {
            iPMask = new UnsignedByte(temp);
        }

        element.removeChild("IPMask", ns);
        temp = element.getChild("GateWayAddr", ns);

        if (temp != null) {
            gateWayAddr = new UnsignedIntegerArray(temp);
        }

        element.removeChild("GateWayAddr", ns);
        temp = element.getChild("DNSAddr", ns);

        if (temp != null) {
            dNSAddr = new UnsignedIntegerArray(temp);
        }

        element.removeChild("DNSAddr", ns);
        temp = element.getChild("IsDHCP", ns);

        if (temp != null) {
            isDHCP = new Bit(temp);
        }

        element.removeChild("IsDHCP", ns);

        if (element.getChildren().size() > 0) {
            String message = "EthernetIpv6Configuration has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   ifIndex of type UnsignedByte .
    * @param   ifIndex to be set
    */
    public void setIfIndex(final UnsignedByte ifIndex) {
        this.ifIndex = ifIndex;
    }

    /**
    * set   iPAddress of type UnsignedIntegerArray .
    * @param   iPAddress to be set
    */
    public void setIPAddress(final UnsignedIntegerArray iPAddress) {
        this.iPAddress = iPAddress;
    }

    /**
    * set   iPMask of type UnsignedByte .
    * @param   iPMask to be set
    */
    public void setIPMask(final UnsignedByte iPMask) {
        this.iPMask = iPMask;
    }

    /**
    * set   gateWayAddr of type UnsignedIntegerArray .
    * @param   gateWayAddr to be set
    */
    public void setGateWayAddr(final UnsignedIntegerArray gateWayAddr) {
        this.gateWayAddr = gateWayAddr;
    }

    /**
    * set   dNSAddr of type UnsignedIntegerArray .
    * @param   dNSAddr to be set
    */
    public void setDNSAddr(final UnsignedIntegerArray dNSAddr) {
        this.dNSAddr = dNSAddr;
    }

    /**
    * set   isDHCP of type Bit .
    * @param   isDHCP to be set
    */
    public void setIsDHCP(final Bit isDHCP) {
        this.isDHCP = isDHCP;
    }

    // end setter

    //getters
    /**
    * get   ifIndex of type UnsignedByte.
    * @return   type UnsignedByte to be set
    */
    public UnsignedByte getIfIndex() {
        return this.ifIndex;
    }

    /**
    * get   iPAddress of type UnsignedIntegerArray.
    * @return   type UnsignedIntegerArray to be set
    */
    public UnsignedIntegerArray getIPAddress() {
        return this.iPAddress;
    }

    /**
    * get   iPMask of type UnsignedByte.
    * @return   type UnsignedByte to be set
    */
    public UnsignedByte getIPMask() {
        return this.iPMask;
    }

    /**
    * get   gateWayAddr of type UnsignedIntegerArray.
    * @return   type UnsignedIntegerArray to be set
    */
    public UnsignedIntegerArray getGateWayAddr() {
        return this.gateWayAddr;
    }

    /**
    * get   dNSAddr of type UnsignedIntegerArray.
    * @return   type UnsignedIntegerArray to be set
    */
    public UnsignedIntegerArray getDNSAddr() {
        return this.dNSAddr;
    }

    /**
    * get   isDHCP of type Bit.
    * @return   type Bit to be set
    */
    public Bit getIsDHCP() {
        return this.isDHCP;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "EthernetIpv6Configuration";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "EthernetIpv6Configuration: ";
        result += ", ifIndex: ";
        result += ifIndex;
        result += ", iPAddress: ";
        result += iPAddress;
        result += ", iPMask: ";
        result += iPMask;
        result += ", gateWayAddr: ";
        result += gateWayAddr;
        result += ", dNSAddr: ";
        result += dNSAddr;
        result += ", isDHCP: ";
        result += isDHCP;

        result = result.replaceFirst(", ", "");

        return result;
    }
}
