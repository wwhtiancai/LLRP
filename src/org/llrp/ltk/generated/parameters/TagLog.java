/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:17 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.parameters.UTCTimestamp;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedByteArray_HEX;
import org.llrp.ltk.types.UnsignedInteger;
import org.llrp.ltk.types.UnsignedLong;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class TagLog extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(620);
    private static final Logger LOGGER = Logger.getLogger(TagLog.class);
    protected UnsignedLong logSequence;
    protected UnsignedByteArray_HEX tID;
    protected UnsignedByteArray_HEX cardID;
    protected UnsignedInteger opNum;
    protected UTCTimestamp uTCTimestamp;

    /**
     * empty constructor to create new parameter.
     */
    public TagLog() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public TagLog(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public TagLog(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (logSequence == null) {
            LOGGER.warn(" logSequence not set");
            throw new MissingParameterException(
                " logSequence not set  for Parameter of Type TagLog");
        }

        resultBits.append(logSequence.encodeBinary());

        if (tID == null) {
            LOGGER.warn(" tID not set");
            throw new MissingParameterException(
                " tID not set  for Parameter of Type TagLog");
        }

        resultBits.append(tID.encodeBinary());

        if (cardID == null) {
            LOGGER.warn(" cardID not set");
            throw new MissingParameterException(
                " cardID not set  for Parameter of Type TagLog");
        }

        resultBits.append(cardID.encodeBinary());

        if (opNum == null) {
            LOGGER.warn(" opNum not set");
            throw new MissingParameterException(
                " opNum not set  for Parameter of Type TagLog");
        }

        resultBits.append(opNum.encodeBinary());

        if (uTCTimestamp == null) {
            // single parameter, may not be null
            LOGGER.warn(" uTCTimestamp not set");
            throw new MissingParameterException(" uTCTimestamp not set");
        } else {
            resultBits.append(uTCTimestamp.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (logSequence == null) {
            LOGGER.warn(" logSequence not set");
            throw new MissingParameterException(" logSequence not set");
        } else {
            element.addContent(logSequence.encodeXML("LogSequence", ns));
        }

        if (tID == null) {
            LOGGER.warn(" tID not set");
            throw new MissingParameterException(" tID not set");
        } else {
            element.addContent(tID.encodeXML("TID", ns));
        }

        if (cardID == null) {
            LOGGER.warn(" cardID not set");
            throw new MissingParameterException(" cardID not set");
        } else {
            element.addContent(cardID.encodeXML("CardID", ns));
        }

        if (opNum == null) {
            LOGGER.warn(" opNum not set");
            throw new MissingParameterException(" opNum not set");
        } else {
            element.addContent(opNum.encodeXML("OpNum", ns));
        }

        //parameters
        if (uTCTimestamp == null) {
            LOGGER.info("uTCTimestamp not set");
            throw new MissingParameterException("uTCTimestamp not set");
        } else {
            element.addContent(uTCTimestamp.encodeXML(
                    uTCTimestamp.getClass().getSimpleName(), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        logSequence = new UnsignedLong(binary.subList(position,
                    UnsignedLong.length()));
        position += UnsignedLong.length();
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedByteArray_HEX.length() * fieldCount) +
            UnsignedShort.length();
        tID = new UnsignedByteArray_HEX(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedByteArray_HEX with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for tID ");
        }

        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedByteArray_HEX.length() * fieldCount) +
            UnsignedShort.length();
        cardID = new UnsignedByteArray_HEX(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedByteArray_HEX with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for cardID ");
        }

        opNum = new UnsignedInteger(binary.subList(position,
                    UnsignedInteger.length()));
        position += UnsignedInteger.length();

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.warn(
                "TagLog misses non optional parameter of type UTCTimestamp");
            throw new MissingParameterException(
                "TagLog misses non optional parameter of type UTCTimestamp");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = uTCTimestamp.length();
        }

        if ((type != null) && type.equals(UTCTimestamp.TYPENUM)) {
            uTCTimestamp = new UTCTimestamp(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " uTCTimestamp is instantiated with UTCTimestamp with length" +
                tempLength);
        } else {
            LOGGER.warn(
                "TagLog misses non optional parameter of type UTCTimestamp");
            throw new MissingParameterException(
                "TagLog misses non optional parameter of type UTCTimestamp");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("LogSequence", ns);

        if (temp != null) {
            logSequence = new UnsignedLong(temp);
        }

        element.removeChild("LogSequence", ns);
        temp = element.getChild("TID", ns);

        if (temp != null) {
            tID = new UnsignedByteArray_HEX(temp);
        }

        element.removeChild("TID", ns);
        temp = element.getChild("CardID", ns);

        if (temp != null) {
            cardID = new UnsignedByteArray_HEX(temp);
        }

        element.removeChild("CardID", ns);
        temp = element.getChild("OpNum", ns);

        if (temp != null) {
            opNum = new UnsignedInteger(temp);
        }

        element.removeChild("OpNum", ns);

        //parameter - not choices - no special actions needed
        temp = element.getChild("UTCTimestamp", ns);

        if (temp != null) {
            uTCTimestamp = new UTCTimestamp(temp);
            LOGGER.info("setting parameter uTCTimestamp for parameter TagLog");
        }

        if (temp == null) {
            LOGGER.warn(
                "TagLog misses non optional parameter of type uTCTimestamp");
            throw new MissingParameterException(
                "TagLog misses non optional parameter of type uTCTimestamp");
        }

        element.removeChild("UTCTimestamp", ns);

        if (element.getChildren().size() > 0) {
            String message = "TagLog has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   logSequence of type UnsignedLong .
    * @param   logSequence to be set
    */
    public void setLogSequence(final UnsignedLong logSequence) {
        this.logSequence = logSequence;
    }

    /**
    * set tID of type UnsignedByteArray_HEX .
    * @param  tID to be set
    */
    public void setTID(final UnsignedByteArray_HEX tID) {
        this.tID = tID;
    }

    /**
    * set cardID of type UnsignedByteArray_HEX .
    * @param  cardID to be set
    */
    public void setCardID(final UnsignedByteArray_HEX cardID) {
        this.cardID = cardID;
    }

    /**
    * set   opNum of type UnsignedInteger .
    * @param   opNum to be set
    */
    public void setOpNum(final UnsignedInteger opNum) {
        this.opNum = opNum;
    }

    /**
    * set uTCTimestamp of type UTCTimestamp.
    * @param  uTCTimestamp to be set
    */
    public void setUTCTimestamp(final UTCTimestamp uTCTimestamp) {
        this.uTCTimestamp = uTCTimestamp;
    }

    // end setter

    //getters
    /**
    * get   logSequence of type UnsignedLong.
    * @return   type UnsignedLong to be set
    */
    public UnsignedLong getLogSequence() {
        return this.logSequence;
    }

    /**
    * get tID of type  UnsignedByteArray_HEX.
    * @return  UnsignedByteArray_HEX
    */
    public UnsignedByteArray_HEX getTID() {
        return tID;
    }

    /**
    * get cardID of type  UnsignedByteArray_HEX.
    * @return  UnsignedByteArray_HEX
    */
    public UnsignedByteArray_HEX getCardID() {
        return cardID;
    }

    /**
    * get   opNum of type UnsignedInteger.
    * @return   type UnsignedInteger to be set
    */
    public UnsignedInteger getOpNum() {
        return this.opNum;
    }

    /**
    * get uTCTimestamp of type UTCTimestamp .
    * @return  UTCTimestamp
    */
    public UTCTimestamp getUTCTimestamp() {
        return uTCTimestamp;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "TagLog";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "TagLog: ";
        result += ", logSequence: ";
        result += logSequence;
        result += ", tID: ";
        result += tID;
        result += ", cardID: ";
        result += cardID;
        result += ", opNum: ";
        result += opNum;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
