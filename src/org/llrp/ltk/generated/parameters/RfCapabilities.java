/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:15 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.parameters.ForDataRateTable;
import org.llrp.ltk.generated.parameters.ForModulationTable;
import org.llrp.ltk.generated.parameters.FrequencyInformation;
import org.llrp.ltk.generated.parameters.ModuleDepthTable;
import org.llrp.ltk.generated.parameters.RevDataEncodingTable;
import org.llrp.ltk.generated.parameters.RevDataRateTable;
import org.llrp.ltk.generated.parameters.TransmitPowerLevelTable;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class RfCapabilities extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(357);
    private static final Logger LOGGER = Logger.getLogger(RfCapabilities.class);
    protected UnsignedShort countryCode;
    protected UnsignedShort communicationsStandard;
    protected List<TransmitPowerLevelTable> transmitPowerLevelTableList = new LinkedList<TransmitPowerLevelTable>();
    protected FrequencyInformation frequencyInformation;
    protected List<ForDataRateTable> forDataRateTableList = new LinkedList<ForDataRateTable>();
    protected List<RevDataRateTable> revDataRateTableList = new LinkedList<RevDataRateTable>();
    protected List<ForModulationTable> forModulationTableList = new LinkedList<ForModulationTable>();
    protected List<RevDataEncodingTable> revDataEncodingTableList = new LinkedList<RevDataEncodingTable>();
    protected List<ModuleDepthTable> moduleDepthTableList = new LinkedList<ModuleDepthTable>();

    /**
     * empty constructor to create new parameter.
     */
    public RfCapabilities() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public RfCapabilities(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public RfCapabilities(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (countryCode == null) {
            LOGGER.warn(" countryCode not set");
            throw new MissingParameterException(
                " countryCode not set  for Parameter of Type RfCapabilities");
        }

        resultBits.append(countryCode.encodeBinary());

        if (communicationsStandard == null) {
            LOGGER.warn(" communicationsStandard not set");
            throw new MissingParameterException(
                " communicationsStandard not set  for Parameter of Type RfCapabilities");
        }

        resultBits.append(communicationsStandard.encodeBinary());

        if (transmitPowerLevelTableList == null) {
            LOGGER.warn(" transmitPowerLevelTableList not set");

            //parameter has to be set - throw exception
            throw new MissingParameterException(
                " transmitPowerLevelTableList not set");
        } else {
            for (TransmitPowerLevelTable field : transmitPowerLevelTableList) {
                resultBits.append(field.encodeBinary());
            }
        }

        if (frequencyInformation == null) {
            // single parameter, may not be null
            LOGGER.warn(" frequencyInformation not set");
            throw new MissingParameterException(" frequencyInformation not set");
        } else {
            resultBits.append(frequencyInformation.encodeBinary());
        }

        if (forDataRateTableList == null) {
            LOGGER.warn(" forDataRateTableList not set");

            //parameter has to be set - throw exception
            throw new MissingParameterException(" forDataRateTableList not set");
        } else {
            for (ForDataRateTable field : forDataRateTableList) {
                resultBits.append(field.encodeBinary());
            }
        }

        if (revDataRateTableList == null) {
            LOGGER.warn(" revDataRateTableList not set");

            //parameter has to be set - throw exception
            throw new MissingParameterException(" revDataRateTableList not set");
        } else {
            for (RevDataRateTable field : revDataRateTableList) {
                resultBits.append(field.encodeBinary());
            }
        }

        if (forModulationTableList == null) {
            LOGGER.warn(" forModulationTableList not set");

            //parameter has to be set - throw exception
            throw new MissingParameterException(
                " forModulationTableList not set");
        } else {
            for (ForModulationTable field : forModulationTableList) {
                resultBits.append(field.encodeBinary());
            }
        }

        if (revDataEncodingTableList == null) {
            LOGGER.warn(" revDataEncodingTableList not set");

            //parameter has to be set - throw exception
            throw new MissingParameterException(
                " revDataEncodingTableList not set");
        } else {
            for (RevDataEncodingTable field : revDataEncodingTableList) {
                resultBits.append(field.encodeBinary());
            }
        }

        if (moduleDepthTableList == null) {
            LOGGER.warn(" moduleDepthTableList not set");

            //parameter has to be set - throw exception
            throw new MissingParameterException(" moduleDepthTableList not set");
        } else {
            for (ModuleDepthTable field : moduleDepthTableList) {
                resultBits.append(field.encodeBinary());
            }
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (countryCode == null) {
            LOGGER.warn(" countryCode not set");
            throw new MissingParameterException(" countryCode not set");
        } else {
            element.addContent(countryCode.encodeXML("CountryCode", ns));
        }

        if (communicationsStandard == null) {
            LOGGER.warn(" communicationsStandard not set");
            throw new MissingParameterException(
                " communicationsStandard not set");
        } else {
            element.addContent(communicationsStandard.encodeXML(
                    "CommunicationsStandard", ns));
        }

        //parameters
        if (transmitPowerLevelTableList == null) {
            LOGGER.warn(" transmitPowerLevelTableList not set");
            throw new MissingParameterException(
                "  transmitPowerLevelTableList not set");
        }

        for (TransmitPowerLevelTable field : transmitPowerLevelTableList) {
            element.addContent(field.encodeXML(field.getClass().getName()
                                                    .replaceAll(field.getClass()
                                                                     .getPackage()
                                                                     .getName() +
                        ".", ""), ns));
        }

        if (frequencyInformation == null) {
            LOGGER.info("frequencyInformation not set");
            throw new MissingParameterException("frequencyInformation not set");
        } else {
            element.addContent(frequencyInformation.encodeXML(
                    frequencyInformation.getClass().getSimpleName(), ns));
        }

        if (forDataRateTableList == null) {
            LOGGER.warn(" forDataRateTableList not set");
            throw new MissingParameterException(
                "  forDataRateTableList not set");
        }

        for (ForDataRateTable field : forDataRateTableList) {
            element.addContent(field.encodeXML(field.getClass().getName()
                                                    .replaceAll(field.getClass()
                                                                     .getPackage()
                                                                     .getName() +
                        ".", ""), ns));
        }

        if (revDataRateTableList == null) {
            LOGGER.warn(" revDataRateTableList not set");
            throw new MissingParameterException(
                "  revDataRateTableList not set");
        }

        for (RevDataRateTable field : revDataRateTableList) {
            element.addContent(field.encodeXML(field.getClass().getName()
                                                    .replaceAll(field.getClass()
                                                                     .getPackage()
                                                                     .getName() +
                        ".", ""), ns));
        }

        if (forModulationTableList == null) {
            LOGGER.warn(" forModulationTableList not set");
            throw new MissingParameterException(
                "  forModulationTableList not set");
        }

        for (ForModulationTable field : forModulationTableList) {
            element.addContent(field.encodeXML(field.getClass().getName()
                                                    .replaceAll(field.getClass()
                                                                     .getPackage()
                                                                     .getName() +
                        ".", ""), ns));
        }

        if (revDataEncodingTableList == null) {
            LOGGER.warn(" revDataEncodingTableList not set");
            throw new MissingParameterException(
                "  revDataEncodingTableList not set");
        }

        for (RevDataEncodingTable field : revDataEncodingTableList) {
            element.addContent(field.encodeXML(field.getClass().getName()
                                                    .replaceAll(field.getClass()
                                                                     .getPackage()
                                                                     .getName() +
                        ".", ""), ns));
        }

        if (moduleDepthTableList == null) {
            LOGGER.warn(" moduleDepthTableList not set");
            throw new MissingParameterException(
                "  moduleDepthTableList not set");
        }

        for (ModuleDepthTable field : moduleDepthTableList) {
            element.addContent(field.encodeXML(field.getClass().getName()
                                                    .replaceAll(field.getClass()
                                                                     .getPackage()
                                                                     .getName() +
                        ".", ""), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        countryCode = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length()));
        position += UnsignedShort.length();
        communicationsStandard = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length()));
        position += UnsignedShort.length();

        // list of parameters
        transmitPowerLevelTableList = new LinkedList<TransmitPowerLevelTable>();
        LOGGER.debug("decoding parameter transmitPowerLevelTableList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(TransmitPowerLevelTable.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = TransmitPowerLevelTable.length();
                }

                transmitPowerLevelTableList.add(new TransmitPowerLevelTable(
                        binary.subList(position, tempLength)));
                LOGGER.debug(
                    "adding TransmitPowerLevelTable to transmitPowerLevelTableList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (transmitPowerLevelTableList.isEmpty()) {
            LOGGER.warn(
                "encoded message does not contain parameter for non optional transmitPowerLevelTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type TransmitPowerLevelTable");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.warn(
                "RfCapabilities misses non optional parameter of type FrequencyInformation");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type FrequencyInformation");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = frequencyInformation.length();
        }

        if ((type != null) && type.equals(FrequencyInformation.TYPENUM)) {
            frequencyInformation = new FrequencyInformation(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " frequencyInformation is instantiated with FrequencyInformation with length" +
                tempLength);
        } else {
            LOGGER.warn(
                "RfCapabilities misses non optional parameter of type FrequencyInformation");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type FrequencyInformation");
        }

        // list of parameters
        forDataRateTableList = new LinkedList<ForDataRateTable>();
        LOGGER.debug("decoding parameter forDataRateTableList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(ForDataRateTable.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = ForDataRateTable.length();
                }

                forDataRateTableList.add(new ForDataRateTable(binary.subList(
                            position, tempLength)));
                LOGGER.debug("adding ForDataRateTable to forDataRateTableList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (forDataRateTableList.isEmpty()) {
            LOGGER.warn(
                "encoded message does not contain parameter for non optional forDataRateTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type ForDataRateTable");
        }

        // list of parameters
        revDataRateTableList = new LinkedList<RevDataRateTable>();
        LOGGER.debug("decoding parameter revDataRateTableList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(RevDataRateTable.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = RevDataRateTable.length();
                }

                revDataRateTableList.add(new RevDataRateTable(binary.subList(
                            position, tempLength)));
                LOGGER.debug("adding RevDataRateTable to revDataRateTableList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (revDataRateTableList.isEmpty()) {
            LOGGER.warn(
                "encoded message does not contain parameter for non optional revDataRateTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type RevDataRateTable");
        }

        // list of parameters
        forModulationTableList = new LinkedList<ForModulationTable>();
        LOGGER.debug("decoding parameter forModulationTableList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(ForModulationTable.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = ForModulationTable.length();
                }

                forModulationTableList.add(new ForModulationTable(
                        binary.subList(position, tempLength)));
                LOGGER.debug(
                    "adding ForModulationTable to forModulationTableList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (forModulationTableList.isEmpty()) {
            LOGGER.warn(
                "encoded message does not contain parameter for non optional forModulationTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type ForModulationTable");
        }

        // list of parameters
        revDataEncodingTableList = new LinkedList<RevDataEncodingTable>();
        LOGGER.debug("decoding parameter revDataEncodingTableList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(RevDataEncodingTable.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = RevDataEncodingTable.length();
                }

                revDataEncodingTableList.add(new RevDataEncodingTable(
                        binary.subList(position, tempLength)));
                LOGGER.debug(
                    "adding RevDataEncodingTable to revDataEncodingTableList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (revDataEncodingTableList.isEmpty()) {
            LOGGER.warn(
                "encoded message does not contain parameter for non optional revDataEncodingTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type RevDataEncodingTable");
        }

        // list of parameters
        moduleDepthTableList = new LinkedList<ModuleDepthTable>();
        LOGGER.debug("decoding parameter moduleDepthTableList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(ModuleDepthTable.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = ModuleDepthTable.length();
                }

                moduleDepthTableList.add(new ModuleDepthTable(binary.subList(
                            position, tempLength)));
                LOGGER.debug("adding ModuleDepthTable to moduleDepthTableList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (moduleDepthTableList.isEmpty()) {
            LOGGER.warn(
                "encoded message does not contain parameter for non optional moduleDepthTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type ModuleDepthTable");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("CountryCode", ns);

        if (temp != null) {
            countryCode = new UnsignedShort(temp);
        }

        element.removeChild("CountryCode", ns);
        temp = element.getChild("CommunicationsStandard", ns);

        if (temp != null) {
            communicationsStandard = new UnsignedShort(temp);
        }

        element.removeChild("CommunicationsStandard", ns);

        //parameter - not choices - no special actions needed
        //we expect a list of parameters
        transmitPowerLevelTableList = new LinkedList<TransmitPowerLevelTable>();
        tempList = element.getChildren("TransmitPowerLevelTable", ns);

        if ((tempList == null) || tempList.isEmpty()) {
            LOGGER.warn(
                "RfCapabilities misses non optional parameter of type transmitPowerLevelTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type transmitPowerLevelTableList");
        } else {
            for (Element e : tempList) {
                transmitPowerLevelTableList.add(new TransmitPowerLevelTable(e));
                LOGGER.debug(
                    "adding TransmitPowerLevelTable to transmitPowerLevelTableList ");
            }
        }

        element.removeChildren("TransmitPowerLevelTable", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("FrequencyInformation", ns);

        if (temp != null) {
            frequencyInformation = new FrequencyInformation(temp);
            LOGGER.info(
                "setting parameter frequencyInformation for parameter RfCapabilities");
        }

        if (temp == null) {
            LOGGER.warn(
                "RfCapabilities misses non optional parameter of type frequencyInformation");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type frequencyInformation");
        }

        element.removeChild("FrequencyInformation", ns);
        //parameter - not choices - no special actions needed
        //we expect a list of parameters
        forDataRateTableList = new LinkedList<ForDataRateTable>();
        tempList = element.getChildren("ForDataRateTable", ns);

        if ((tempList == null) || tempList.isEmpty()) {
            LOGGER.warn(
                "RfCapabilities misses non optional parameter of type forDataRateTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type forDataRateTableList");
        } else {
            for (Element e : tempList) {
                forDataRateTableList.add(new ForDataRateTable(e));
                LOGGER.debug("adding ForDataRateTable to forDataRateTableList ");
            }
        }

        element.removeChildren("ForDataRateTable", ns);
        //parameter - not choices - no special actions needed
        //we expect a list of parameters
        revDataRateTableList = new LinkedList<RevDataRateTable>();
        tempList = element.getChildren("RevDataRateTable", ns);

        if ((tempList == null) || tempList.isEmpty()) {
            LOGGER.warn(
                "RfCapabilities misses non optional parameter of type revDataRateTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type revDataRateTableList");
        } else {
            for (Element e : tempList) {
                revDataRateTableList.add(new RevDataRateTable(e));
                LOGGER.debug("adding RevDataRateTable to revDataRateTableList ");
            }
        }

        element.removeChildren("RevDataRateTable", ns);
        //parameter - not choices - no special actions needed
        //we expect a list of parameters
        forModulationTableList = new LinkedList<ForModulationTable>();
        tempList = element.getChildren("ForModulationTable", ns);

        if ((tempList == null) || tempList.isEmpty()) {
            LOGGER.warn(
                "RfCapabilities misses non optional parameter of type forModulationTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type forModulationTableList");
        } else {
            for (Element e : tempList) {
                forModulationTableList.add(new ForModulationTable(e));
                LOGGER.debug(
                    "adding ForModulationTable to forModulationTableList ");
            }
        }

        element.removeChildren("ForModulationTable", ns);
        //parameter - not choices - no special actions needed
        //we expect a list of parameters
        revDataEncodingTableList = new LinkedList<RevDataEncodingTable>();
        tempList = element.getChildren("RevDataEncodingTable", ns);

        if ((tempList == null) || tempList.isEmpty()) {
            LOGGER.warn(
                "RfCapabilities misses non optional parameter of type revDataEncodingTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type revDataEncodingTableList");
        } else {
            for (Element e : tempList) {
                revDataEncodingTableList.add(new RevDataEncodingTable(e));
                LOGGER.debug(
                    "adding RevDataEncodingTable to revDataEncodingTableList ");
            }
        }

        element.removeChildren("RevDataEncodingTable", ns);
        //parameter - not choices - no special actions needed
        //we expect a list of parameters
        moduleDepthTableList = new LinkedList<ModuleDepthTable>();
        tempList = element.getChildren("ModuleDepthTable", ns);

        if ((tempList == null) || tempList.isEmpty()) {
            LOGGER.warn(
                "RfCapabilities misses non optional parameter of type moduleDepthTableList");
            throw new MissingParameterException(
                "RfCapabilities misses non optional parameter of type moduleDepthTableList");
        } else {
            for (Element e : tempList) {
                moduleDepthTableList.add(new ModuleDepthTable(e));
                LOGGER.debug("adding ModuleDepthTable to moduleDepthTableList ");
            }
        }

        element.removeChildren("ModuleDepthTable", ns);

        if (element.getChildren().size() > 0) {
            String message = "RfCapabilities has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   countryCode of type UnsignedShort .
    * @param   countryCode to be set
    */
    public void setCountryCode(final UnsignedShort countryCode) {
        this.countryCode = countryCode;
    }

    /**
    * set   communicationsStandard of type UnsignedShort .
    * @param   communicationsStandard to be set
    */
    public void setCommunicationsStandard(
        final UnsignedShort communicationsStandard) {
        this.communicationsStandard = communicationsStandard;
    }

    /**
    * set transmitPowerLevelTableList of type  List &lt;TransmitPowerLevelTable>.
    * @param  transmitPowerLevelTableList to be set
    */
    public void setTransmitPowerLevelTableList(
        final List<TransmitPowerLevelTable> transmitPowerLevelTableList) {
        this.transmitPowerLevelTableList = transmitPowerLevelTableList;
    }

    /**
    * set frequencyInformation of type FrequencyInformation.
    * @param  frequencyInformation to be set
    */
    public void setFrequencyInformation(
        final FrequencyInformation frequencyInformation) {
        this.frequencyInformation = frequencyInformation;
    }

    /**
    * set forDataRateTableList of type  List &lt;ForDataRateTable>.
    * @param  forDataRateTableList to be set
    */
    public void setForDataRateTableList(
        final List<ForDataRateTable> forDataRateTableList) {
        this.forDataRateTableList = forDataRateTableList;
    }

    /**
    * set revDataRateTableList of type  List &lt;RevDataRateTable>.
    * @param  revDataRateTableList to be set
    */
    public void setRevDataRateTableList(
        final List<RevDataRateTable> revDataRateTableList) {
        this.revDataRateTableList = revDataRateTableList;
    }

    /**
    * set forModulationTableList of type  List &lt;ForModulationTable>.
    * @param  forModulationTableList to be set
    */
    public void setForModulationTableList(
        final List<ForModulationTable> forModulationTableList) {
        this.forModulationTableList = forModulationTableList;
    }

    /**
    * set revDataEncodingTableList of type  List &lt;RevDataEncodingTable>.
    * @param  revDataEncodingTableList to be set
    */
    public void setRevDataEncodingTableList(
        final List<RevDataEncodingTable> revDataEncodingTableList) {
        this.revDataEncodingTableList = revDataEncodingTableList;
    }

    /**
    * set moduleDepthTableList of type  List &lt;ModuleDepthTable>.
    * @param  moduleDepthTableList to be set
    */
    public void setModuleDepthTableList(
        final List<ModuleDepthTable> moduleDepthTableList) {
        this.moduleDepthTableList = moduleDepthTableList;
    }

    // end setter

    //getters
    /**
    * get   countryCode of type UnsignedShort.
    * @return   type UnsignedShort to be set
    */
    public UnsignedShort getCountryCode() {
        return this.countryCode;
    }

    /**
    * get   communicationsStandard of type UnsignedShort.
    * @return   type UnsignedShort to be set
    */
    public UnsignedShort getCommunicationsStandard() {
        return this.communicationsStandard;
    }

    /**
    * get transmitPowerLevelTableList of type List &lt;TransmitPowerLevelTable> .
    * @return  List &lt;TransmitPowerLevelTable>
    */
    public List<TransmitPowerLevelTable> getTransmitPowerLevelTableList() {
        return transmitPowerLevelTableList;
    }

    /**
    * get frequencyInformation of type FrequencyInformation .
    * @return  FrequencyInformation
    */
    public FrequencyInformation getFrequencyInformation() {
        return frequencyInformation;
    }

    /**
    * get forDataRateTableList of type List &lt;ForDataRateTable> .
    * @return  List &lt;ForDataRateTable>
    */
    public List<ForDataRateTable> getForDataRateTableList() {
        return forDataRateTableList;
    }

    /**
    * get revDataRateTableList of type List &lt;RevDataRateTable> .
    * @return  List &lt;RevDataRateTable>
    */
    public List<RevDataRateTable> getRevDataRateTableList() {
        return revDataRateTableList;
    }

    /**
    * get forModulationTableList of type List &lt;ForModulationTable> .
    * @return  List &lt;ForModulationTable>
    */
    public List<ForModulationTable> getForModulationTableList() {
        return forModulationTableList;
    }

    /**
    * get revDataEncodingTableList of type List &lt;RevDataEncodingTable> .
    * @return  List &lt;RevDataEncodingTable>
    */
    public List<RevDataEncodingTable> getRevDataEncodingTableList() {
        return revDataEncodingTableList;
    }

    /**
    * get moduleDepthTableList of type List &lt;ModuleDepthTable> .
    * @return  List &lt;ModuleDepthTable>
    */
    public List<ModuleDepthTable> getModuleDepthTableList() {
        return moduleDepthTableList;
    }

    // end getters

    //add methods

    /**
    * add element transmitPowerLevelTable of type TransmitPowerLevelTable .
    * @param  transmitPowerLevelTable of type TransmitPowerLevelTable
    */
    public void addToTransmitPowerLevelTableList(
        TransmitPowerLevelTable transmitPowerLevelTable) {
        if (this.transmitPowerLevelTableList == null) {
            this.transmitPowerLevelTableList = new LinkedList<TransmitPowerLevelTable>();
        }

        this.transmitPowerLevelTableList.add(transmitPowerLevelTable);
    }

    /**
    * add element forDataRateTable of type ForDataRateTable .
    * @param  forDataRateTable of type ForDataRateTable
    */
    public void addToForDataRateTableList(ForDataRateTable forDataRateTable) {
        if (this.forDataRateTableList == null) {
            this.forDataRateTableList = new LinkedList<ForDataRateTable>();
        }

        this.forDataRateTableList.add(forDataRateTable);
    }

    /**
    * add element revDataRateTable of type RevDataRateTable .
    * @param  revDataRateTable of type RevDataRateTable
    */
    public void addToRevDataRateTableList(RevDataRateTable revDataRateTable) {
        if (this.revDataRateTableList == null) {
            this.revDataRateTableList = new LinkedList<RevDataRateTable>();
        }

        this.revDataRateTableList.add(revDataRateTable);
    }

    /**
    * add element forModulationTable of type ForModulationTable .
    * @param  forModulationTable of type ForModulationTable
    */
    public void addToForModulationTableList(
        ForModulationTable forModulationTable) {
        if (this.forModulationTableList == null) {
            this.forModulationTableList = new LinkedList<ForModulationTable>();
        }

        this.forModulationTableList.add(forModulationTable);
    }

    /**
    * add element revDataEncodingTable of type RevDataEncodingTable .
    * @param  revDataEncodingTable of type RevDataEncodingTable
    */
    public void addToRevDataEncodingTableList(
        RevDataEncodingTable revDataEncodingTable) {
        if (this.revDataEncodingTableList == null) {
            this.revDataEncodingTableList = new LinkedList<RevDataEncodingTable>();
        }

        this.revDataEncodingTableList.add(revDataEncodingTable);
    }

    /**
    * add element moduleDepthTable of type ModuleDepthTable .
    * @param  moduleDepthTable of type ModuleDepthTable
    */
    public void addToModuleDepthTableList(ModuleDepthTable moduleDepthTable) {
        if (this.moduleDepthTableList == null) {
            this.moduleDepthTableList = new LinkedList<ModuleDepthTable>();
        }

        this.moduleDepthTableList.add(moduleDepthTable);
    }

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "RfCapabilities";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "RfCapabilities: ";
        result += ", countryCode: ";
        result += countryCode;
        result += ", communicationsStandard: ";
        result += communicationsStandard;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
