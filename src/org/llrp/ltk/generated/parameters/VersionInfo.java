/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:18 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.types.Bit;
import org.llrp.ltk.types.BitList;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UTF8String_UTF_8;
import org.llrp.ltk.types.UnsignedByteArray;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class VersionInfo extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(700);
    private static final Logger LOGGER = Logger.getLogger(VersionInfo.class);
    protected UnsignedByteArray versionData;
    protected Bit usedOrSpare;
    protected Bit setUse;
    protected Bit hasRun;
    protected Bit canRun;
    protected BitList reserved0 = new BitList(4);
    protected UTF8String_UTF_8 verDescInfo;

    /**
     * empty constructor to create new parameter.
     */
    public VersionInfo() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public VersionInfo(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public VersionInfo(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (versionData == null) {
            LOGGER.warn(" versionData not set");
            throw new MissingParameterException(
                " versionData not set  for Parameter of Type VersionInfo");
        }

        resultBits.append(versionData.encodeBinary());

        if (usedOrSpare == null) {
            LOGGER.warn(" usedOrSpare not set");
            throw new MissingParameterException(
                " usedOrSpare not set  for Parameter of Type VersionInfo");
        }

        resultBits.append(usedOrSpare.encodeBinary());

        if (setUse == null) {
            LOGGER.warn(" setUse not set");
            throw new MissingParameterException(
                " setUse not set  for Parameter of Type VersionInfo");
        }

        resultBits.append(setUse.encodeBinary());

        if (hasRun == null) {
            LOGGER.warn(" hasRun not set");
            throw new MissingParameterException(
                " hasRun not set  for Parameter of Type VersionInfo");
        }

        resultBits.append(hasRun.encodeBinary());

        if (canRun == null) {
            LOGGER.warn(" canRun not set");
            throw new MissingParameterException(
                " canRun not set  for Parameter of Type VersionInfo");
        }

        resultBits.append(canRun.encodeBinary());
        resultBits.append(reserved0.encodeBinary());

        if (verDescInfo == null) {
            LOGGER.warn(" verDescInfo not set");
            throw new MissingParameterException(
                " verDescInfo not set  for Parameter of Type VersionInfo");
        }

        resultBits.append(verDescInfo.encodeBinary());

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (versionData == null) {
            LOGGER.warn(" versionData not set");
            throw new MissingParameterException(" versionData not set");
        } else {
            element.addContent(versionData.encodeXML("VersionData", ns));
        }

        if (usedOrSpare == null) {
            LOGGER.warn(" usedOrSpare not set");
            throw new MissingParameterException(" usedOrSpare not set");
        } else {
            element.addContent(usedOrSpare.encodeXML("UsedOrSpare", ns));
        }

        if (setUse == null) {
            LOGGER.warn(" setUse not set");
            throw new MissingParameterException(" setUse not set");
        } else {
            element.addContent(setUse.encodeXML("SetUse", ns));
        }

        if (hasRun == null) {
            LOGGER.warn(" hasRun not set");
            throw new MissingParameterException(" hasRun not set");
        } else {
            element.addContent(hasRun.encodeXML("HasRun", ns));
        }

        if (canRun == null) {
            LOGGER.warn(" canRun not set");
            throw new MissingParameterException(" canRun not set");
        } else {
            element.addContent(canRun.encodeXML("CanRun", ns));
        }

        //element.addContent(reserved0.encodeXML("reserved",ns));
        if (verDescInfo == null) {
            LOGGER.warn(" verDescInfo not set");
            throw new MissingParameterException(" verDescInfo not set");
        } else {
            element.addContent(verDescInfo.encodeXML("VerDescInfo", ns));
        }

        //parameters
        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedByteArray.length() * fieldCount) +
            UnsignedShort.length();
        versionData = new UnsignedByteArray(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedByteArray with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for versionData ");
        }

        usedOrSpare = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        setUse = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        hasRun = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        canRun = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        position += reserved0.length();
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UTF8String_UTF_8.length() * fieldCount) +
            UnsignedShort.length();
        verDescInfo = new UTF8String_UTF_8(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UTF8String_UTF_8 with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for verDescInfo ");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("VersionData", ns);

        if (temp != null) {
            versionData = new UnsignedByteArray(temp);
        }

        element.removeChild("VersionData", ns);
        temp = element.getChild("UsedOrSpare", ns);

        if (temp != null) {
            usedOrSpare = new Bit(temp);
        }

        element.removeChild("UsedOrSpare", ns);
        temp = element.getChild("SetUse", ns);

        if (temp != null) {
            setUse = new Bit(temp);
        }

        element.removeChild("SetUse", ns);
        temp = element.getChild("HasRun", ns);

        if (temp != null) {
            hasRun = new Bit(temp);
        }

        element.removeChild("HasRun", ns);
        temp = element.getChild("CanRun", ns);

        if (temp != null) {
            canRun = new Bit(temp);
        }

        element.removeChild("CanRun", ns);
        temp = element.getChild("VerDescInfo", ns);

        if (temp != null) {
            verDescInfo = new UTF8String_UTF_8(temp);
        }

        element.removeChild("VerDescInfo", ns);

        if (element.getChildren().size() > 0) {
            String message = "VersionInfo has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   versionData of type UnsignedByteArray .
    * @param   versionData to be set
    */
    public void setVersionData(final UnsignedByteArray versionData) {
        this.versionData = versionData;
    }

    /**
    * set   usedOrSpare of type Bit .
    * @param   usedOrSpare to be set
    */
    public void setUsedOrSpare(final Bit usedOrSpare) {
        this.usedOrSpare = usedOrSpare;
    }

    /**
    * set   setUse of type Bit .
    * @param   setUse to be set
    */
    public void setSetUse(final Bit setUse) {
        this.setUse = setUse;
    }

    /**
    * set   hasRun of type Bit .
    * @param   hasRun to be set
    */
    public void setHasRun(final Bit hasRun) {
        this.hasRun = hasRun;
    }

    /**
    * set   canRun of type Bit .
    * @param   canRun to be set
    */
    public void setCanRun(final Bit canRun) {
        this.canRun = canRun;
    }

    /**
    * set verDescInfo of type UTF8String_UTF_8 .
    * @param  verDescInfo to be set
    */
    public void setVerDescInfo(final UTF8String_UTF_8 verDescInfo) {
        this.verDescInfo = verDescInfo;
    }

    // end setter

    //getters
    /**
    * get   versionData of type UnsignedByteArray.
    * @return   type UnsignedByteArray to be set
    */
    public UnsignedByteArray getVersionData() {
        return this.versionData;
    }

    /**
    * get   usedOrSpare of type Bit.
    * @return   type Bit to be set
    */
    public Bit getUsedOrSpare() {
        return this.usedOrSpare;
    }

    /**
    * get   setUse of type Bit.
    * @return   type Bit to be set
    */
    public Bit getSetUse() {
        return this.setUse;
    }

    /**
    * get   hasRun of type Bit.
    * @return   type Bit to be set
    */
    public Bit getHasRun() {
        return this.hasRun;
    }

    /**
    * get   canRun of type Bit.
    * @return   type Bit to be set
    */
    public Bit getCanRun() {
        return this.canRun;
    }

    /**
    * get verDescInfo of type  UTF8String_UTF_8.
    * @return  UTF8String_UTF_8
    */
    public UTF8String_UTF_8 getVerDescInfo() {
        return verDescInfo;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "VersionInfo";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "VersionInfo: ";
        result += ", versionData: ";
        result += versionData;
        result += ", usedOrSpare: ";
        result += usedOrSpare;
        result += ", setUse: ";
        result += setUse;
        result += ", hasRun: ";
        result += hasRun;
        result += ", canRun: ";
        result += canRun;

        result += ", verDescInfo: ";
        result += verDescInfo;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
