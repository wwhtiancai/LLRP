/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:16 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.interfaces.SpecParameter;
import org.llrp.ltk.generated.parameters.AntennaSpecStopTrigger;
import org.llrp.ltk.generated.parameters.RfSpec;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedByteArray;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class AntennaSpec extends TLVParameter implements SpecParameter {
    public static final SignedShort TYPENUM = new SignedShort(405);
    private static final Logger LOGGER = Logger.getLogger(AntennaSpec.class);
    protected UnsignedByteArray antennaIDs;
    protected AntennaSpecStopTrigger antennaSpecStopTrigger;
    protected List<RfSpec> rfSpecList = new LinkedList<RfSpec>();

    /**
     * empty constructor to create new parameter.
     */
    public AntennaSpec() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public AntennaSpec(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public AntennaSpec(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (antennaIDs == null) {
            LOGGER.warn(" antennaIDs not set");
            throw new MissingParameterException(
                " antennaIDs not set  for Parameter of Type AntennaSpec");
        }

        resultBits.append(antennaIDs.encodeBinary());

        if (antennaSpecStopTrigger == null) {
            // single parameter, may not be null
            LOGGER.warn(" antennaSpecStopTrigger not set");
            throw new MissingParameterException(
                " antennaSpecStopTrigger not set");
        } else {
            resultBits.append(antennaSpecStopTrigger.encodeBinary());
        }

        if (rfSpecList == null) {
            LOGGER.warn(" rfSpecList not set");

            //parameter has to be set - throw exception
            throw new MissingParameterException(" rfSpecList not set");
        } else {
            for (RfSpec field : rfSpecList) {
                resultBits.append(field.encodeBinary());
            }
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (antennaIDs == null) {
            LOGGER.warn(" antennaIDs not set");
            throw new MissingParameterException(" antennaIDs not set");
        } else {
            element.addContent(antennaIDs.encodeXML("AntennaIDs", ns));
        }

        //parameters
        if (antennaSpecStopTrigger == null) {
            LOGGER.info("antennaSpecStopTrigger not set");
            throw new MissingParameterException(
                "antennaSpecStopTrigger not set");
        } else {
            element.addContent(antennaSpecStopTrigger.encodeXML(
                    antennaSpecStopTrigger.getClass().getSimpleName(), ns));
        }

        if (rfSpecList == null) {
            LOGGER.warn(" rfSpecList not set");
            throw new MissingParameterException("  rfSpecList not set");
        }

        for (RfSpec field : rfSpecList) {
            element.addContent(field.encodeXML(field.getClass().getName()
                                                    .replaceAll(field.getClass()
                                                                     .getPackage()
                                                                     .getName() +
                        ".", ""), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedByteArray.length() * fieldCount) +
            UnsignedShort.length();
        antennaIDs = new UnsignedByteArray(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedByteArray with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for antennaIDs ");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.warn(
                "AntennaSpec misses non optional parameter of type AntennaSpecStopTrigger");
            throw new MissingParameterException(
                "AntennaSpec misses non optional parameter of type AntennaSpecStopTrigger");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = antennaSpecStopTrigger.length();
        }

        if ((type != null) && type.equals(AntennaSpecStopTrigger.TYPENUM)) {
            antennaSpecStopTrigger = new AntennaSpecStopTrigger(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " antennaSpecStopTrigger is instantiated with AntennaSpecStopTrigger with length" +
                tempLength);
        } else {
            LOGGER.warn(
                "AntennaSpec misses non optional parameter of type AntennaSpecStopTrigger");
            throw new MissingParameterException(
                "AntennaSpec misses non optional parameter of type AntennaSpecStopTrigger");
        }

        // list of parameters
        rfSpecList = new LinkedList<RfSpec>();
        LOGGER.debug("decoding parameter rfSpecList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(RfSpec.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = RfSpec.length();
                }

                rfSpecList.add(new RfSpec(binary.subList(position, tempLength)));
                LOGGER.debug("adding RfSpec to rfSpecList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (rfSpecList.isEmpty()) {
            LOGGER.warn(
                "encoded message does not contain parameter for non optional rfSpecList");
            throw new MissingParameterException(
                "AntennaSpec misses non optional parameter of type RfSpec");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("AntennaIDs", ns);

        if (temp != null) {
            antennaIDs = new UnsignedByteArray(temp);
        }

        element.removeChild("AntennaIDs", ns);

        //parameter - not choices - no special actions needed
        temp = element.getChild("AntennaSpecStopTrigger", ns);

        if (temp != null) {
            antennaSpecStopTrigger = new AntennaSpecStopTrigger(temp);
            LOGGER.info(
                "setting parameter antennaSpecStopTrigger for parameter AntennaSpec");
        }

        if (temp == null) {
            LOGGER.warn(
                "AntennaSpec misses non optional parameter of type antennaSpecStopTrigger");
            throw new MissingParameterException(
                "AntennaSpec misses non optional parameter of type antennaSpecStopTrigger");
        }

        element.removeChild("AntennaSpecStopTrigger", ns);
        //parameter - not choices - no special actions needed
        //we expect a list of parameters
        rfSpecList = new LinkedList<RfSpec>();
        tempList = element.getChildren("RfSpec", ns);

        if ((tempList == null) || tempList.isEmpty()) {
            LOGGER.warn(
                "AntennaSpec misses non optional parameter of type rfSpecList");
            throw new MissingParameterException(
                "AntennaSpec misses non optional parameter of type rfSpecList");
        } else {
            for (Element e : tempList) {
                rfSpecList.add(new RfSpec(e));
                LOGGER.debug("adding RfSpec to rfSpecList ");
            }
        }

        element.removeChildren("RfSpec", ns);

        if (element.getChildren().size() > 0) {
            String message = "AntennaSpec has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   antennaIDs of type UnsignedByteArray .
    * @param   antennaIDs to be set
    */
    public void setAntennaIDs(final UnsignedByteArray antennaIDs) {
        this.antennaIDs = antennaIDs;
    }

    /**
    * set antennaSpecStopTrigger of type AntennaSpecStopTrigger.
    * @param  antennaSpecStopTrigger to be set
    */
    public void setAntennaSpecStopTrigger(
        final AntennaSpecStopTrigger antennaSpecStopTrigger) {
        this.antennaSpecStopTrigger = antennaSpecStopTrigger;
    }

    /**
    * set rfSpecList of type  List &lt;RfSpec>.
    * @param  rfSpecList to be set
    */
    public void setRfSpecList(final List<RfSpec> rfSpecList) {
        this.rfSpecList = rfSpecList;
    }

    // end setter

    //getters
    /**
    * get   antennaIDs of type UnsignedByteArray.
    * @return   type UnsignedByteArray to be set
    */
    public UnsignedByteArray getAntennaIDs() {
        return this.antennaIDs;
    }

    /**
    * get antennaSpecStopTrigger of type AntennaSpecStopTrigger .
    * @return  AntennaSpecStopTrigger
    */
    public AntennaSpecStopTrigger getAntennaSpecStopTrigger() {
        return antennaSpecStopTrigger;
    }

    /**
    * get rfSpecList of type List &lt;RfSpec> .
    * @return  List &lt;RfSpec>
    */
    public List<RfSpec> getRfSpecList() {
        return rfSpecList;
    }

    // end getters

    //add methods

    /**
    * add element rfSpec of type RfSpec .
    * @param  rfSpec of type RfSpec
    */
    public void addToRfSpecList(RfSpec rfSpec) {
        if (this.rfSpecList == null) {
            this.rfSpecList = new LinkedList<RfSpec>();
        }

        this.rfSpecList.add(rfSpec);
    }

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "AntennaSpec";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "AntennaSpec: ";
        result += ", antennaIDs: ";
        result += antennaIDs;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
