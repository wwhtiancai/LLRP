/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:15 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.parameters.GPIOCapabilities;
import org.llrp.ltk.types.Bit;
import org.llrp.ltk.types.BitList;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UTF8String_UTF_8;
import org.llrp.ltk.types.UnsignedByte;
import org.llrp.ltk.types.UnsignedByteArray;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class GenaralCapabilities extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(350);
    private static final Logger LOGGER = Logger.getLogger(GenaralCapabilities.class);
    protected UTF8String_UTF_8 deviceManufacturerName;
    protected UnsignedByteArray deviceSN;
    protected UnsignedShort deviceModelType;
    protected UnsignedShort deviceSpecificationType;
    protected UnsignedByte maxNumberOfAntennaSupported;
    protected Bit hasUTCClockCapability;
    protected Bit hasLocationCapability;
    protected Bit isDeviceBinded;
    protected BitList reserved0 = new BitList(5);
    protected GPIOCapabilities gPIOCapabilities;

    /**
     * empty constructor to create new parameter.
     */
    public GenaralCapabilities() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public GenaralCapabilities(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public GenaralCapabilities(Element element)
        throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (deviceManufacturerName == null) {
            LOGGER.warn(" deviceManufacturerName not set");
            throw new MissingParameterException(
                " deviceManufacturerName not set  for Parameter of Type GenaralCapabilities");
        }

        resultBits.append(deviceManufacturerName.encodeBinary());

        if (deviceSN == null) {
            LOGGER.warn(" deviceSN not set");
            throw new MissingParameterException(
                " deviceSN not set  for Parameter of Type GenaralCapabilities");
        }

        resultBits.append(deviceSN.encodeBinary());

        if (deviceModelType == null) {
            LOGGER.warn(" deviceModelType not set");
            throw new MissingParameterException(
                " deviceModelType not set  for Parameter of Type GenaralCapabilities");
        }

        resultBits.append(deviceModelType.encodeBinary());

        if (deviceSpecificationType == null) {
            LOGGER.warn(" deviceSpecificationType not set");
            throw new MissingParameterException(
                " deviceSpecificationType not set  for Parameter of Type GenaralCapabilities");
        }

        resultBits.append(deviceSpecificationType.encodeBinary());

        if (maxNumberOfAntennaSupported == null) {
            LOGGER.warn(" maxNumberOfAntennaSupported not set");
            throw new MissingParameterException(
                " maxNumberOfAntennaSupported not set  for Parameter of Type GenaralCapabilities");
        }

        resultBits.append(maxNumberOfAntennaSupported.encodeBinary());

        if (hasUTCClockCapability == null) {
            LOGGER.warn(" hasUTCClockCapability not set");
            throw new MissingParameterException(
                " hasUTCClockCapability not set  for Parameter of Type GenaralCapabilities");
        }

        resultBits.append(hasUTCClockCapability.encodeBinary());

        if (hasLocationCapability == null) {
            LOGGER.warn(" hasLocationCapability not set");
            throw new MissingParameterException(
                " hasLocationCapability not set  for Parameter of Type GenaralCapabilities");
        }

        resultBits.append(hasLocationCapability.encodeBinary());

        if (isDeviceBinded == null) {
            LOGGER.warn(" isDeviceBinded not set");
            throw new MissingParameterException(
                " isDeviceBinded not set  for Parameter of Type GenaralCapabilities");
        }

        resultBits.append(isDeviceBinded.encodeBinary());
        resultBits.append(reserved0.encodeBinary());

        if (gPIOCapabilities == null) {
            // single parameter, may not be null
            LOGGER.warn(" gPIOCapabilities not set");
            throw new MissingParameterException(" gPIOCapabilities not set");
        } else {
            resultBits.append(gPIOCapabilities.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (deviceManufacturerName == null) {
            LOGGER.warn(" deviceManufacturerName not set");
            throw new MissingParameterException(
                " deviceManufacturerName not set");
        } else {
            element.addContent(deviceManufacturerName.encodeXML(
                    "DeviceManufacturerName", ns));
        }

        if (deviceSN == null) {
            LOGGER.warn(" deviceSN not set");
            throw new MissingParameterException(" deviceSN not set");
        } else {
            element.addContent(deviceSN.encodeXML("DeviceSN", ns));
        }

        if (deviceModelType == null) {
            LOGGER.warn(" deviceModelType not set");
            throw new MissingParameterException(" deviceModelType not set");
        } else {
            element.addContent(deviceModelType.encodeXML("DeviceModelType", ns));
        }

        if (deviceSpecificationType == null) {
            LOGGER.warn(" deviceSpecificationType not set");
            throw new MissingParameterException(
                " deviceSpecificationType not set");
        } else {
            element.addContent(deviceSpecificationType.encodeXML(
                    "DeviceSpecificationType", ns));
        }

        if (maxNumberOfAntennaSupported == null) {
            LOGGER.warn(" maxNumberOfAntennaSupported not set");
            throw new MissingParameterException(
                " maxNumberOfAntennaSupported not set");
        } else {
            element.addContent(maxNumberOfAntennaSupported.encodeXML(
                    "MaxNumberOfAntennaSupported", ns));
        }

        if (hasUTCClockCapability == null) {
            LOGGER.warn(" hasUTCClockCapability not set");
            throw new MissingParameterException(
                " hasUTCClockCapability not set");
        } else {
            element.addContent(hasUTCClockCapability.encodeXML(
                    "HasUTCClockCapability", ns));
        }

        if (hasLocationCapability == null) {
            LOGGER.warn(" hasLocationCapability not set");
            throw new MissingParameterException(
                " hasLocationCapability not set");
        } else {
            element.addContent(hasLocationCapability.encodeXML(
                    "HasLocationCapability", ns));
        }

        if (isDeviceBinded == null) {
            LOGGER.warn(" isDeviceBinded not set");
            throw new MissingParameterException(" isDeviceBinded not set");
        } else {
            element.addContent(isDeviceBinded.encodeXML("IsDeviceBinded", ns));
        }

        //element.addContent(reserved0.encodeXML("reserved",ns));
        //parameters
        if (gPIOCapabilities == null) {
            LOGGER.info("gPIOCapabilities not set");
            throw new MissingParameterException("gPIOCapabilities not set");
        } else {
            element.addContent(gPIOCapabilities.encodeXML(
                    gPIOCapabilities.getClass().getSimpleName(), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UTF8String_UTF_8.length() * fieldCount) +
            UnsignedShort.length();
        deviceManufacturerName = new UTF8String_UTF_8(binary.subList(position,
                    tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UTF8String_UTF_8 with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for deviceManufacturerName ");
        }

        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedByteArray.length() * fieldCount) +
            UnsignedShort.length();
        deviceSN = new UnsignedByteArray(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedByteArray with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for deviceSN ");
        }

        deviceModelType = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length()));
        position += UnsignedShort.length();
        deviceSpecificationType = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length()));
        position += UnsignedShort.length();
        maxNumberOfAntennaSupported = new UnsignedByte(binary.subList(
                    position, UnsignedByte.length()));
        position += UnsignedByte.length();
        hasUTCClockCapability = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        hasLocationCapability = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        isDeviceBinded = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        position += reserved0.length();

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.warn(
                "GenaralCapabilities misses non optional parameter of type GPIOCapabilities");
            throw new MissingParameterException(
                "GenaralCapabilities misses non optional parameter of type GPIOCapabilities");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = gPIOCapabilities.length();
        }

        if ((type != null) && type.equals(GPIOCapabilities.TYPENUM)) {
            gPIOCapabilities = new GPIOCapabilities(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " gPIOCapabilities is instantiated with GPIOCapabilities with length" +
                tempLength);
        } else {
            LOGGER.warn(
                "GenaralCapabilities misses non optional parameter of type GPIOCapabilities");
            throw new MissingParameterException(
                "GenaralCapabilities misses non optional parameter of type GPIOCapabilities");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("DeviceManufacturerName", ns);

        if (temp != null) {
            deviceManufacturerName = new UTF8String_UTF_8(temp);
        }

        element.removeChild("DeviceManufacturerName", ns);
        temp = element.getChild("DeviceSN", ns);

        if (temp != null) {
            deviceSN = new UnsignedByteArray(temp);
        }

        element.removeChild("DeviceSN", ns);
        temp = element.getChild("DeviceModelType", ns);

        if (temp != null) {
            deviceModelType = new UnsignedShort(temp);
        }

        element.removeChild("DeviceModelType", ns);
        temp = element.getChild("DeviceSpecificationType", ns);

        if (temp != null) {
            deviceSpecificationType = new UnsignedShort(temp);
        }

        element.removeChild("DeviceSpecificationType", ns);
        temp = element.getChild("MaxNumberOfAntennaSupported", ns);

        if (temp != null) {
            maxNumberOfAntennaSupported = new UnsignedByte(temp);
        }

        element.removeChild("MaxNumberOfAntennaSupported", ns);
        temp = element.getChild("HasUTCClockCapability", ns);

        if (temp != null) {
            hasUTCClockCapability = new Bit(temp);
        }

        element.removeChild("HasUTCClockCapability", ns);
        temp = element.getChild("HasLocationCapability", ns);

        if (temp != null) {
            hasLocationCapability = new Bit(temp);
        }

        element.removeChild("HasLocationCapability", ns);
        temp = element.getChild("IsDeviceBinded", ns);

        if (temp != null) {
            isDeviceBinded = new Bit(temp);
        }

        element.removeChild("IsDeviceBinded", ns);

        //parameter - not choices - no special actions needed
        temp = element.getChild("GPIOCapabilities", ns);

        if (temp != null) {
            gPIOCapabilities = new GPIOCapabilities(temp);
            LOGGER.info(
                "setting parameter gPIOCapabilities for parameter GenaralCapabilities");
        }

        if (temp == null) {
            LOGGER.warn(
                "GenaralCapabilities misses non optional parameter of type gPIOCapabilities");
            throw new MissingParameterException(
                "GenaralCapabilities misses non optional parameter of type gPIOCapabilities");
        }

        element.removeChild("GPIOCapabilities", ns);

        if (element.getChildren().size() > 0) {
            String message = "GenaralCapabilities has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set deviceManufacturerName of type UTF8String_UTF_8 .
    * @param  deviceManufacturerName to be set
    */
    public void setDeviceManufacturerName(
        final UTF8String_UTF_8 deviceManufacturerName) {
        this.deviceManufacturerName = deviceManufacturerName;
    }

    /**
    * set   deviceSN of type UnsignedByteArray .
    * @param   deviceSN to be set
    */
    public void setDeviceSN(final UnsignedByteArray deviceSN) {
        this.deviceSN = deviceSN;
    }

    /**
    * set   deviceModelType of type UnsignedShort .
    * @param   deviceModelType to be set
    */
    public void setDeviceModelType(final UnsignedShort deviceModelType) {
        this.deviceModelType = deviceModelType;
    }

    /**
    * set   deviceSpecificationType of type UnsignedShort .
    * @param   deviceSpecificationType to be set
    */
    public void setDeviceSpecificationType(
        final UnsignedShort deviceSpecificationType) {
        this.deviceSpecificationType = deviceSpecificationType;
    }

    /**
    * set   maxNumberOfAntennaSupported of type UnsignedByte .
    * @param   maxNumberOfAntennaSupported to be set
    */
    public void setMaxNumberOfAntennaSupported(
        final UnsignedByte maxNumberOfAntennaSupported) {
        this.maxNumberOfAntennaSupported = maxNumberOfAntennaSupported;
    }

    /**
    * set   hasUTCClockCapability of type Bit .
    * @param   hasUTCClockCapability to be set
    */
    public void setHasUTCClockCapability(final Bit hasUTCClockCapability) {
        this.hasUTCClockCapability = hasUTCClockCapability;
    }

    /**
    * set   hasLocationCapability of type Bit .
    * @param   hasLocationCapability to be set
    */
    public void setHasLocationCapability(final Bit hasLocationCapability) {
        this.hasLocationCapability = hasLocationCapability;
    }

    /**
    * set   isDeviceBinded of type Bit .
    * @param   isDeviceBinded to be set
    */
    public void setIsDeviceBinded(final Bit isDeviceBinded) {
        this.isDeviceBinded = isDeviceBinded;
    }

    /**
    * set gPIOCapabilities of type GPIOCapabilities.
    * @param  gPIOCapabilities to be set
    */
    public void setGPIOCapabilities(final GPIOCapabilities gPIOCapabilities) {
        this.gPIOCapabilities = gPIOCapabilities;
    }

    // end setter

    //getters
    /**
    * get deviceManufacturerName of type  UTF8String_UTF_8.
    * @return  UTF8String_UTF_8
    */
    public UTF8String_UTF_8 getDeviceManufacturerName() {
        return deviceManufacturerName;
    }

    /**
    * get   deviceSN of type UnsignedByteArray.
    * @return   type UnsignedByteArray to be set
    */
    public UnsignedByteArray getDeviceSN() {
        return this.deviceSN;
    }

    /**
    * get   deviceModelType of type UnsignedShort.
    * @return   type UnsignedShort to be set
    */
    public UnsignedShort getDeviceModelType() {
        return this.deviceModelType;
    }

    /**
    * get   deviceSpecificationType of type UnsignedShort.
    * @return   type UnsignedShort to be set
    */
    public UnsignedShort getDeviceSpecificationType() {
        return this.deviceSpecificationType;
    }

    /**
    * get   maxNumberOfAntennaSupported of type UnsignedByte.
    * @return   type UnsignedByte to be set
    */
    public UnsignedByte getMaxNumberOfAntennaSupported() {
        return this.maxNumberOfAntennaSupported;
    }

    /**
    * get   hasUTCClockCapability of type Bit.
    * @return   type Bit to be set
    */
    public Bit getHasUTCClockCapability() {
        return this.hasUTCClockCapability;
    }

    /**
    * get   hasLocationCapability of type Bit.
    * @return   type Bit to be set
    */
    public Bit getHasLocationCapability() {
        return this.hasLocationCapability;
    }

    /**
    * get   isDeviceBinded of type Bit.
    * @return   type Bit to be set
    */
    public Bit getIsDeviceBinded() {
        return this.isDeviceBinded;
    }

    /**
    * get gPIOCapabilities of type GPIOCapabilities .
    * @return  GPIOCapabilities
    */
    public GPIOCapabilities getGPIOCapabilities() {
        return gPIOCapabilities;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "GenaralCapabilities";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "GenaralCapabilities: ";
        result += ", deviceManufacturerName: ";
        result += deviceManufacturerName;
        result += ", deviceSN: ";
        result += deviceSN;
        result += ", deviceModelType: ";
        result += deviceModelType;
        result += ", deviceSpecificationType: ";
        result += deviceSpecificationType;
        result += ", maxNumberOfAntennaSupported: ";
        result += maxNumberOfAntennaSupported;
        result += ", hasUTCClockCapability: ";
        result += hasUTCClockCapability;
        result += ", hasLocationCapability: ";
        result += hasLocationCapability;
        result += ", isDeviceBinded: ";
        result += isDeviceBinded;

        result = result.replaceFirst(", ", "");

        return result;
    }
}
