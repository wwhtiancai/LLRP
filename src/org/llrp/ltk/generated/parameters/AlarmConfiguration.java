/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:18 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.parameters.AlarmThreshod;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedByte;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class AlarmConfiguration extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(666);
    private static final Logger LOGGER = Logger.getLogger(AlarmConfiguration.class);
    protected UnsignedByte alarmMask;
    protected AlarmThreshod alarmThreshod;

    /**
     * empty constructor to create new parameter.
     */
    public AlarmConfiguration() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public AlarmConfiguration(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public AlarmConfiguration(Element element)
        throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (alarmMask == null) {
            LOGGER.warn(" alarmMask not set");
            throw new MissingParameterException(
                " alarmMask not set  for Parameter of Type AlarmConfiguration");
        }

        resultBits.append(alarmMask.encodeBinary());

        if (alarmThreshod == null) {
            // optional parameter, may be null
            LOGGER.info(" alarmThreshod not set");
        } else {
            resultBits.append(alarmThreshod.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (alarmMask == null) {
            LOGGER.warn(" alarmMask not set");
            throw new MissingParameterException(" alarmMask not set");
        } else {
            element.addContent(alarmMask.encodeXML("AlarmMask", ns));
        }

        //parameters
        if (alarmThreshod == null) {
            LOGGER.info("alarmThreshod not set");
        } else {
            element.addContent(alarmThreshod.encodeXML(
                    alarmThreshod.getClass().getSimpleName(), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        alarmMask = new UnsignedByte(binary.subList(position,
                    UnsignedByte.length()));
        position += UnsignedByte.length();

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "AlarmConfiguration misses optional parameter of type AlarmThreshod");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = alarmThreshod.length();
        }

        if ((type != null) && type.equals(AlarmThreshod.TYPENUM)) {
            alarmThreshod = new AlarmThreshod(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " alarmThreshod is instantiated with AlarmThreshod with length" +
                tempLength);
        } else {
            LOGGER.info(
                "AlarmConfiguration misses optional parameter of type AlarmThreshod");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("AlarmMask", ns);

        if (temp != null) {
            alarmMask = new UnsignedByte(temp);
        }

        element.removeChild("AlarmMask", ns);

        //parameter - not choices - no special actions needed
        temp = element.getChild("AlarmThreshod", ns);

        if (temp != null) {
            alarmThreshod = new AlarmThreshod(temp);
            LOGGER.info(
                "setting parameter alarmThreshod for parameter AlarmConfiguration");
        }

        if (temp == null) {
            LOGGER.info(
                "AlarmConfiguration misses optional parameter of type alarmThreshod");
        }

        element.removeChild("AlarmThreshod", ns);

        if (element.getChildren().size() > 0) {
            String message = "AlarmConfiguration has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   alarmMask of type UnsignedByte .
    * @param   alarmMask to be set
    */
    public void setAlarmMask(final UnsignedByte alarmMask) {
        this.alarmMask = alarmMask;
    }

    /**
    * set alarmThreshod of type AlarmThreshod.
    * @param  alarmThreshod to be set
    */
    public void setAlarmThreshod(final AlarmThreshod alarmThreshod) {
        this.alarmThreshod = alarmThreshod;
    }

    // end setter

    //getters
    /**
    * get   alarmMask of type UnsignedByte.
    * @return   type UnsignedByte to be set
    */
    public UnsignedByte getAlarmMask() {
        return this.alarmMask;
    }

    /**
    * get alarmThreshod of type AlarmThreshod .
    * @return  AlarmThreshod
    */
    public AlarmThreshod getAlarmThreshod() {
        return alarmThreshod;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "AlarmConfiguration";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "AlarmConfiguration: ";
        result += ", alarmMask: ";
        result += alarmMask;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
