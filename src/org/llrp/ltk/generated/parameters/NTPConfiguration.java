/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:18 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.parameters.IPAddress;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedInteger;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class NTPConfiguration extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(679);
    private static final Logger LOGGER = Logger.getLogger(NTPConfiguration.class);
    protected UnsignedInteger ntpPeriodicTime;
    protected List<IPAddress> iPAddressList = new LinkedList<IPAddress>();

    /**
     * empty constructor to create new parameter.
     */
    public NTPConfiguration() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public NTPConfiguration(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public NTPConfiguration(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (ntpPeriodicTime == null) {
            LOGGER.warn(" ntpPeriodicTime not set");
            throw new MissingParameterException(
                " ntpPeriodicTime not set  for Parameter of Type NTPConfiguration");
        }

        resultBits.append(ntpPeriodicTime.encodeBinary());

        if (iPAddressList == null) {
            LOGGER.warn(" iPAddressList not set");

            //parameter has to be set - throw exception
            throw new MissingParameterException(" iPAddressList not set");
        } else {
            for (IPAddress field : iPAddressList) {
                resultBits.append(field.encodeBinary());
            }
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (ntpPeriodicTime == null) {
            LOGGER.warn(" ntpPeriodicTime not set");
            throw new MissingParameterException(" ntpPeriodicTime not set");
        } else {
            element.addContent(ntpPeriodicTime.encodeXML("NtpPeriodicTime", ns));
        }

        //parameters
        if (iPAddressList == null) {
            LOGGER.warn(" iPAddressList not set");
            throw new MissingParameterException("  iPAddressList not set");
        }

        for (IPAddress field : iPAddressList) {
            element.addContent(field.encodeXML(field.getClass().getName()
                                                    .replaceAll(field.getClass()
                                                                     .getPackage()
                                                                     .getName() +
                        ".", ""), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        ntpPeriodicTime = new UnsignedInteger(binary.subList(position,
                    UnsignedInteger.length()));
        position += UnsignedInteger.length();

        // list of parameters
        iPAddressList = new LinkedList<IPAddress>();
        LOGGER.debug("decoding parameter iPAddressList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(IPAddress.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = IPAddress.length();
                }

                iPAddressList.add(new IPAddress(binary.subList(position,
                            tempLength)));
                LOGGER.debug("adding IPAddress to iPAddressList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (iPAddressList.isEmpty()) {
            LOGGER.warn(
                "encoded message does not contain parameter for non optional iPAddressList");
            throw new MissingParameterException(
                "NTPConfiguration misses non optional parameter of type IPAddress");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("NtpPeriodicTime", ns);

        if (temp != null) {
            ntpPeriodicTime = new UnsignedInteger(temp);
        }

        element.removeChild("NtpPeriodicTime", ns);

        //parameter - not choices - no special actions needed
        //we expect a list of parameters
        iPAddressList = new LinkedList<IPAddress>();
        tempList = element.getChildren("IPAddress", ns);

        if ((tempList == null) || tempList.isEmpty()) {
            LOGGER.warn(
                "NTPConfiguration misses non optional parameter of type iPAddressList");
            throw new MissingParameterException(
                "NTPConfiguration misses non optional parameter of type iPAddressList");
        } else {
            for (Element e : tempList) {
                iPAddressList.add(new IPAddress(e));
                LOGGER.debug("adding IPAddress to iPAddressList ");
            }
        }

        element.removeChildren("IPAddress", ns);

        if (element.getChildren().size() > 0) {
            String message = "NTPConfiguration has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   ntpPeriodicTime of type UnsignedInteger .
    * @param   ntpPeriodicTime to be set
    */
    public void setNtpPeriodicTime(final UnsignedInteger ntpPeriodicTime) {
        this.ntpPeriodicTime = ntpPeriodicTime;
    }

    /**
    * set iPAddressList of type  List &lt;IPAddress>.
    * @param  iPAddressList to be set
    */
    public void setIPAddressList(final List<IPAddress> iPAddressList) {
        this.iPAddressList = iPAddressList;
    }

    // end setter

    //getters
    /**
    * get   ntpPeriodicTime of type UnsignedInteger.
    * @return   type UnsignedInteger to be set
    */
    public UnsignedInteger getNtpPeriodicTime() {
        return this.ntpPeriodicTime;
    }

    /**
    * get iPAddressList of type List &lt;IPAddress> .
    * @return  List &lt;IPAddress>
    */
    public List<IPAddress> getIPAddressList() {
        return iPAddressList;
    }

    // end getters

    //add methods

    /**
    * add element iPAddress of type IPAddress .
    * @param  iPAddress of type IPAddress
    */
    public void addToIPAddressList(IPAddress iPAddress) {
        if (this.iPAddressList == null) {
            this.iPAddressList = new LinkedList<IPAddress>();
        }

        this.iPAddressList.add(iPAddress);
    }

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "NTPConfiguration";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "NTPConfiguration: ";
        result += ", ntpPeriodicTime: ";
        result += ntpPeriodicTime;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
