/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:17 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.interfaces.OpSpec;
import org.llrp.ltk.generated.parameters.ClientRequestSpec;
import org.llrp.ltk.generated.parameters.HbPrivateWriteSpec;
import org.llrp.ltk.generated.parameters.HbReadSpec;
import org.llrp.ltk.generated.parameters.HbWriteSpec;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedByteArray_HEX;
import org.llrp.ltk.types.UnsignedInteger;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class ClientRequestAck extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(590);
    private static final Logger LOGGER = Logger.getLogger(ClientRequestAck.class);
    protected UnsignedInteger accessSpecID;
    protected UnsignedByteArray_HEX tID;
    protected List<OpSpec> opSpecList = new LinkedList<OpSpec>();

    /**
     * empty constructor to create new parameter.
     */
    public ClientRequestAck() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public ClientRequestAck(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public ClientRequestAck(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (accessSpecID == null) {
            LOGGER.warn(" accessSpecID not set");
            throw new MissingParameterException(
                " accessSpecID not set  for Parameter of Type ClientRequestAck");
        }

        resultBits.append(accessSpecID.encodeBinary());

        if (tID == null) {
            LOGGER.warn(" tID not set");
            throw new MissingParameterException(
                " tID not set  for Parameter of Type ClientRequestAck");
        }

        resultBits.append(tID.encodeBinary());

        if (opSpecList == null) {
            //just warn - it is optional 
            LOGGER.info(" opSpecList not set");
        } else {
            for (OpSpec field : opSpecList) {
                resultBits.append(field.encodeBinary());
            }
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (accessSpecID == null) {
            LOGGER.warn(" accessSpecID not set");
            throw new MissingParameterException(" accessSpecID not set");
        } else {
            element.addContent(accessSpecID.encodeXML("AccessSpecID", ns));
        }

        if (tID == null) {
            LOGGER.warn(" tID not set");
            throw new MissingParameterException(" tID not set");
        } else {
            element.addContent(tID.encodeXML("TID", ns));
        }

        //parameters
        if (opSpecList == null) {
            LOGGER.info("opSpecList not set");
        } else {
            for (OpSpec field : opSpecList) {
                element.addContent(field.encodeXML(field.getClass().getName()
                                                        .replaceAll(field.getClass()
                                                                         .getPackage()
                                                                         .getName() +
                            ".", ""), ns));
            }
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        accessSpecID = new UnsignedInteger(binary.subList(position,
                    UnsignedInteger.length()));
        position += UnsignedInteger.length();
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedByteArray_HEX.length() * fieldCount) +
            UnsignedShort.length();
        tID = new UnsignedByteArray_HEX(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedByteArray_HEX with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for tID ");
        }

        // list of parameters
        opSpecList = new LinkedList<OpSpec>();
        LOGGER.debug("decoding parameter opSpecList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //choiceRef
            if ((type != null) && type.equals(HbReadSpec.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = HbReadSpec.length();
                }

                opSpecList.add(new HbReadSpec(binary.subList(position,
                            tempLength)));
                LOGGER.debug("adding HbReadSpec to opSpecList ");
                position += tempLength;
                atLeastOnce = true;
            }

            if ((type != null) && type.equals(HbWriteSpec.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = HbWriteSpec.length();
                }

                opSpecList.add(new HbWriteSpec(binary.subList(position,
                            tempLength)));
                LOGGER.debug("adding HbWriteSpec to opSpecList ");
                position += tempLength;
                atLeastOnce = true;
            }

            if ((type != null) && type.equals(HbPrivateWriteSpec.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = HbPrivateWriteSpec.length();
                }

                opSpecList.add(new HbPrivateWriteSpec(binary.subList(position,
                            tempLength)));
                LOGGER.debug("adding HbPrivateWriteSpec to opSpecList ");
                position += tempLength;
                atLeastOnce = true;
            }

            if ((type != null) && type.equals(ClientRequestSpec.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = ClientRequestSpec.length();
                }

                opSpecList.add(new ClientRequestSpec(binary.subList(position,
                            tempLength)));
                LOGGER.debug("adding ClientRequestSpec to opSpecList ");
                position += tempLength;
                atLeastOnce = true;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (opSpecList.isEmpty()) {
            LOGGER.info(
                "encoded message does not contain parameter for optional opSpecList");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("AccessSpecID", ns);

        if (temp != null) {
            accessSpecID = new UnsignedInteger(temp);
        }

        element.removeChild("AccessSpecID", ns);
        temp = element.getChild("TID", ns);

        if (temp != null) {
            tID = new UnsignedByteArray_HEX(temp);
        }

        element.removeChild("TID", ns);

        //choices - must check all possible subtypes
        //list of Choice Type Parameter
        opSpecList = new LinkedList<OpSpec>();
        // for each possible subtype get all childs
        tempList = element.getChildren("HbReadSpec", ns);

        for (Element e : tempList) {
            opSpecList.add(new HbReadSpec(e));
            LOGGER.debug("adding HbReadSpec to opSpecList ");
            atLeastOnce = true;
        }

        element.removeChildren("HbReadSpec", ns);

        tempList = element.getChildren("HbWriteSpec", ns);

        for (Element e : tempList) {
            opSpecList.add(new HbWriteSpec(e));
            LOGGER.debug("adding HbWriteSpec to opSpecList ");
            atLeastOnce = true;
        }

        element.removeChildren("HbWriteSpec", ns);

        tempList = element.getChildren("HbPrivateWriteSpec", ns);

        for (Element e : tempList) {
            opSpecList.add(new HbPrivateWriteSpec(e));
            LOGGER.debug("adding HbPrivateWriteSpec to opSpecList ");
            atLeastOnce = true;
        }

        element.removeChildren("HbPrivateWriteSpec", ns);

        tempList = element.getChildren("ClientRequestSpec", ns);

        for (Element e : tempList) {
            opSpecList.add(new ClientRequestSpec(e));
            LOGGER.debug("adding ClientRequestSpec to opSpecList ");
            atLeastOnce = true;
        }

        element.removeChildren("ClientRequestSpec", ns);

        if (!atLeastOnce) {
            LOGGER.info(
                "ClientRequestAck misses optional parameter of type opSpecList");
        }

        atLeastOnce = false;

        if (element.getChildren().size() > 0) {
            String message = "ClientRequestAck has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   accessSpecID of type UnsignedInteger .
    * @param   accessSpecID to be set
    */
    public void setAccessSpecID(final UnsignedInteger accessSpecID) {
        this.accessSpecID = accessSpecID;
    }

    /**
    * set tID of type UnsignedByteArray_HEX .
    * @param  tID to be set
    */
    public void setTID(final UnsignedByteArray_HEX tID) {
        this.tID = tID;
    }

    /**
    * set opSpecList of type  List &lt;OpSpec>.
    * @param  opSpecList to be set
    */
    public void setOpSpecList(final List<OpSpec> opSpecList) {
        this.opSpecList = opSpecList;
    }

    // end setter

    //getters
    /**
    * get   accessSpecID of type UnsignedInteger.
    * @return   type UnsignedInteger to be set
    */
    public UnsignedInteger getAccessSpecID() {
        return this.accessSpecID;
    }

    /**
    * get tID of type  UnsignedByteArray_HEX.
    * @return  UnsignedByteArray_HEX
    */
    public UnsignedByteArray_HEX getTID() {
        return tID;
    }

    /**
    * get opSpecList of type List &lt;OpSpec> .
    * @return  List &lt;OpSpec>
    */
    public List<OpSpec> getOpSpecList() {
        return opSpecList;
    }

    // end getters

    //add methods

    /**
    * add element opSpec of type OpSpec .
    * @param  opSpec of type OpSpec
    */
    public void addToOpSpecList(OpSpec opSpec) {
        if (this.opSpecList == null) {
            this.opSpecList = new LinkedList<OpSpec>();
        }

        this.opSpecList.add(opSpec);
    }

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "ClientRequestAck";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "ClientRequestAck: ";
        result += ", accessSpecID: ";
        result += accessSpecID;
        result += ", tID: ";
        result += tID;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
