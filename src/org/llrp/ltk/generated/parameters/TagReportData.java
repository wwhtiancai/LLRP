/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:16 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.interfaces.AccessSpecResult;
import org.llrp.ltk.generated.interfaces.SelectSpecResult;
import org.llrp.ltk.generated.parameters.AccessSpecID;
import org.llrp.ltk.generated.parameters.AntennaID;
import org.llrp.ltk.generated.parameters.ClientRequestSpecResult;
import org.llrp.ltk.generated.parameters.CustomizedSelectSpecResult;
import org.llrp.ltk.generated.parameters.FirstSeenTimestampUTC;
import org.llrp.ltk.generated.parameters.GenaralSelectSpecResult;
import org.llrp.ltk.generated.parameters.HbCustomizedReadSpecResult;
import org.llrp.ltk.generated.parameters.HbPrivateWriteSpecResult;
import org.llrp.ltk.generated.parameters.HbReadSpecResult;
import org.llrp.ltk.generated.parameters.HbWriteSpecResult;
import org.llrp.ltk.generated.parameters.LastSeenTimestampUTC;
import org.llrp.ltk.generated.parameters.PeakRSSI;
import org.llrp.ltk.generated.parameters.RfSpecID;
import org.llrp.ltk.generated.parameters.SelectSpecID;
import org.llrp.ltk.generated.parameters.SpecIndex;
import org.llrp.ltk.generated.parameters.TagSeenCount;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedByteArray_HEX;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class TagReportData extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(500);
    private static final Logger LOGGER = Logger.getLogger(TagReportData.class);
    protected UnsignedByteArray_HEX tID;
    protected SelectSpecID selectSpecID;
    protected SpecIndex specIndex;
    protected RfSpecID rfSpecID;
    protected AntennaID antennaID;
    protected PeakRSSI peakRSSI;
    protected FirstSeenTimestampUTC firstSeenTimestampUTC;
    protected LastSeenTimestampUTC lastSeenTimestampUTC;
    protected TagSeenCount tagSeenCount;
    protected AccessSpecID accessSpecID;
    protected SelectSpecResult selectSpecResult;
    protected List<AccessSpecResult> accessSpecResultList = new LinkedList<AccessSpecResult>();

    /**
     * empty constructor to create new parameter.
     */
    public TagReportData() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public TagReportData(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public TagReportData(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (tID == null) {
            LOGGER.warn(" tID not set");
            throw new MissingParameterException(
                " tID not set  for Parameter of Type TagReportData");
        }

        resultBits.append(tID.encodeBinary());

        if (selectSpecID == null) {
            // optional parameter, may be null
            LOGGER.info(" selectSpecID not set");
        } else {
            resultBits.append(selectSpecID.encodeBinary());
        }

        if (specIndex == null) {
            // optional parameter, may be null
            LOGGER.info(" specIndex not set");
        } else {
            resultBits.append(specIndex.encodeBinary());
        }

        if (rfSpecID == null) {
            // optional parameter, may be null
            LOGGER.info(" rfSpecID not set");
        } else {
            resultBits.append(rfSpecID.encodeBinary());
        }

        if (antennaID == null) {
            // optional parameter, may be null
            LOGGER.info(" antennaID not set");
        } else {
            resultBits.append(antennaID.encodeBinary());
        }

        if (peakRSSI == null) {
            // optional parameter, may be null
            LOGGER.info(" peakRSSI not set");
        } else {
            resultBits.append(peakRSSI.encodeBinary());
        }

        if (firstSeenTimestampUTC == null) {
            // optional parameter, may be null
            LOGGER.info(" firstSeenTimestampUTC not set");
        } else {
            resultBits.append(firstSeenTimestampUTC.encodeBinary());
        }

        if (lastSeenTimestampUTC == null) {
            // optional parameter, may be null
            LOGGER.info(" lastSeenTimestampUTC not set");
        } else {
            resultBits.append(lastSeenTimestampUTC.encodeBinary());
        }

        if (tagSeenCount == null) {
            // optional parameter, may be null
            LOGGER.info(" tagSeenCount not set");
        } else {
            resultBits.append(tagSeenCount.encodeBinary());
        }

        if (accessSpecID == null) {
            // optional parameter, may be null
            LOGGER.info(" accessSpecID not set");
        } else {
            resultBits.append(accessSpecID.encodeBinary());
        }

        if (selectSpecResult == null) {
            // optional parameter, may be null
            LOGGER.info(" selectSpecResult not set");
        } else {
            resultBits.append(selectSpecResult.encodeBinary());
        }

        if (accessSpecResultList == null) {
            //just warn - it is optional 
            LOGGER.info(" accessSpecResultList not set");
        } else {
            for (AccessSpecResult field : accessSpecResultList) {
                resultBits.append(field.encodeBinary());
            }
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (tID == null) {
            LOGGER.warn(" tID not set");
            throw new MissingParameterException(" tID not set");
        } else {
            element.addContent(tID.encodeXML("TID", ns));
        }

        //parameters
        if (selectSpecID == null) {
            LOGGER.info("selectSpecID not set");
        } else {
            element.addContent(selectSpecID.encodeXML(
                    selectSpecID.getClass().getSimpleName(), ns));
        }

        if (specIndex == null) {
            LOGGER.info("specIndex not set");
        } else {
            element.addContent(specIndex.encodeXML(specIndex.getClass()
                                                            .getSimpleName(), ns));
        }

        if (rfSpecID == null) {
            LOGGER.info("rfSpecID not set");
        } else {
            element.addContent(rfSpecID.encodeXML(rfSpecID.getClass()
                                                          .getSimpleName(), ns));
        }

        if (antennaID == null) {
            LOGGER.info("antennaID not set");
        } else {
            element.addContent(antennaID.encodeXML(antennaID.getClass()
                                                            .getSimpleName(), ns));
        }

        if (peakRSSI == null) {
            LOGGER.info("peakRSSI not set");
        } else {
            element.addContent(peakRSSI.encodeXML(peakRSSI.getClass()
                                                          .getSimpleName(), ns));
        }

        if (firstSeenTimestampUTC == null) {
            LOGGER.info("firstSeenTimestampUTC not set");
        } else {
            element.addContent(firstSeenTimestampUTC.encodeXML(
                    firstSeenTimestampUTC.getClass().getSimpleName(), ns));
        }

        if (lastSeenTimestampUTC == null) {
            LOGGER.info("lastSeenTimestampUTC not set");
        } else {
            element.addContent(lastSeenTimestampUTC.encodeXML(
                    lastSeenTimestampUTC.getClass().getSimpleName(), ns));
        }

        if (tagSeenCount == null) {
            LOGGER.info("tagSeenCount not set");
        } else {
            element.addContent(tagSeenCount.encodeXML(
                    tagSeenCount.getClass().getSimpleName(), ns));
        }

        if (accessSpecID == null) {
            LOGGER.info("accessSpecID not set");
        } else {
            element.addContent(accessSpecID.encodeXML(
                    accessSpecID.getClass().getSimpleName(), ns));
        }

        if (selectSpecResult == null) {
            LOGGER.info("selectSpecResult not set");
        } else {
            element.addContent(selectSpecResult.encodeXML(
                    selectSpecResult.getClass().getSimpleName(), ns));
        }

        if (accessSpecResultList == null) {
            LOGGER.info("accessSpecResultList not set");
        } else {
            for (AccessSpecResult field : accessSpecResultList) {
                element.addContent(field.encodeXML(field.getClass().getName()
                                                        .replaceAll(field.getClass()
                                                                         .getPackage()
                                                                         .getName() +
                            ".", ""), ns));
            }
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        // array. first 16 bits indicate length of array
        fieldCount = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length())).toShort();
        tempLength = (UnsignedByteArray_HEX.length() * fieldCount) +
            UnsignedShort.length();
        tID = new UnsignedByteArray_HEX(binary.subList(position, tempLength));
        position += tempLength;
        LOGGER.debug("decoding array of type: UnsignedByteArray_HEX with " +
            tempLength + " length");

        //might need padding
        // must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
        if ((tempLength % 8) > 0) {
            position += (8 - (tempLength % 8));
            LOGGER.info("padding needed for tID ");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type SelectSpecID");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = selectSpecID.length();
        }

        if ((type != null) && type.equals(SelectSpecID.TYPENUM)) {
            selectSpecID = new SelectSpecID(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " selectSpecID is instantiated with SelectSpecID with length" +
                tempLength);
        } else {
            LOGGER.info(
                "TagReportData misses optional parameter of type SelectSpecID");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type SpecIndex");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = specIndex.length();
        }

        if ((type != null) && type.equals(SpecIndex.TYPENUM)) {
            specIndex = new SpecIndex(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " specIndex is instantiated with SpecIndex with length" +
                tempLength);
        } else {
            LOGGER.info(
                "TagReportData misses optional parameter of type SpecIndex");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type RfSpecID");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = rfSpecID.length();
        }

        if ((type != null) && type.equals(RfSpecID.TYPENUM)) {
            rfSpecID = new RfSpecID(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" rfSpecID is instantiated with RfSpecID with length" +
                tempLength);
        } else {
            LOGGER.info(
                "TagReportData misses optional parameter of type RfSpecID");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type AntennaID");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = antennaID.length();
        }

        if ((type != null) && type.equals(AntennaID.TYPENUM)) {
            antennaID = new AntennaID(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " antennaID is instantiated with AntennaID with length" +
                tempLength);
        } else {
            LOGGER.info(
                "TagReportData misses optional parameter of type AntennaID");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type PeakRSSI");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = peakRSSI.length();
        }

        if ((type != null) && type.equals(PeakRSSI.TYPENUM)) {
            peakRSSI = new PeakRSSI(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(" peakRSSI is instantiated with PeakRSSI with length" +
                tempLength);
        } else {
            LOGGER.info(
                "TagReportData misses optional parameter of type PeakRSSI");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type FirstSeenTimestampUTC");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = firstSeenTimestampUTC.length();
        }

        if ((type != null) && type.equals(FirstSeenTimestampUTC.TYPENUM)) {
            firstSeenTimestampUTC = new FirstSeenTimestampUTC(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " firstSeenTimestampUTC is instantiated with FirstSeenTimestampUTC with length" +
                tempLength);
        } else {
            LOGGER.info(
                "TagReportData misses optional parameter of type FirstSeenTimestampUTC");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type LastSeenTimestampUTC");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = lastSeenTimestampUTC.length();
        }

        if ((type != null) && type.equals(LastSeenTimestampUTC.TYPENUM)) {
            lastSeenTimestampUTC = new LastSeenTimestampUTC(binary.subList(
                        position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " lastSeenTimestampUTC is instantiated with LastSeenTimestampUTC with length" +
                tempLength);
        } else {
            LOGGER.info(
                "TagReportData misses optional parameter of type LastSeenTimestampUTC");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type TagSeenCount");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = tagSeenCount.length();
        }

        if ((type != null) && type.equals(TagSeenCount.TYPENUM)) {
            tagSeenCount = new TagSeenCount(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " tagSeenCount is instantiated with TagSeenCount with length" +
                tempLength);
        } else {
            LOGGER.info(
                "TagReportData misses optional parameter of type TagSeenCount");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type AccessSpecID");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = accessSpecID.length();
        }

        if ((type != null) && type.equals(AccessSpecID.TYPENUM)) {
            accessSpecID = new AccessSpecID(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " accessSpecID is instantiated with AccessSpecID with length" +
                tempLength);
        } else {
            LOGGER.info(
                "TagReportData misses optional parameter of type AccessSpecID");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "TagReportData misses optional parameter of type SelectSpecResult");
        }

        boolean found = false;
        LOGGER.debug("decoding choice type SelectSpecResult ");

        //if first bit is 1 it is a TV Parameter
        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = GenaralSelectSpecResult.length();
        }

        if ((type != null) && type.equals(GenaralSelectSpecResult.TYPENUM)) {
            selectSpecResult = new GenaralSelectSpecResult(binary.subList(
                        position, tempLength));
            LOGGER.debug(
                " selectSpecResult instatiated to GenaralSelectSpecResult with length " +
                tempLength);
            position += tempLength;
            found = true;
        }

        //if first bit is 1 it is a TV Parameter
        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = CustomizedSelectSpecResult.length();
        }

        if ((type != null) && type.equals(CustomizedSelectSpecResult.TYPENUM)) {
            selectSpecResult = new CustomizedSelectSpecResult(binary.subList(
                        position, tempLength));
            LOGGER.debug(
                " selectSpecResult instatiated to CustomizedSelectSpecResult with length " +
                tempLength);
            position += tempLength;
            found = true;
        }

        if (!found) {
            LOGGER.info(
                "encoded message misses optional parameter selectSpecResult");
        }

        // list of parameters
        accessSpecResultList = new LinkedList<AccessSpecResult>();
        LOGGER.debug("decoding parameter accessSpecResultList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //choiceRef
            if ((type != null) && type.equals(HbReadSpecResult.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = HbReadSpecResult.length();
                }

                accessSpecResultList.add(new HbReadSpecResult(binary.subList(
                            position, tempLength)));
                LOGGER.debug("adding HbReadSpecResult to accessSpecResultList ");
                position += tempLength;
                atLeastOnce = true;
            }

            if ((type != null) &&
                    type.equals(HbCustomizedReadSpecResult.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = HbCustomizedReadSpecResult.length();
                }

                accessSpecResultList.add(new HbCustomizedReadSpecResult(
                        binary.subList(position, tempLength)));
                LOGGER.debug(
                    "adding HbCustomizedReadSpecResult to accessSpecResultList ");
                position += tempLength;
                atLeastOnce = true;
            }

            if ((type != null) && type.equals(HbWriteSpecResult.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = HbWriteSpecResult.length();
                }

                accessSpecResultList.add(new HbWriteSpecResult(binary.subList(
                            position, tempLength)));
                LOGGER.debug(
                    "adding HbWriteSpecResult to accessSpecResultList ");
                position += tempLength;
                atLeastOnce = true;
            }

            if ((type != null) &&
                    type.equals(HbPrivateWriteSpecResult.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = HbPrivateWriteSpecResult.length();
                }

                accessSpecResultList.add(new HbPrivateWriteSpecResult(
                        binary.subList(position, tempLength)));
                LOGGER.debug(
                    "adding HbPrivateWriteSpecResult to accessSpecResultList ");
                position += tempLength;
                atLeastOnce = true;
            }

            if ((type != null) && type.equals(ClientRequestSpecResult.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = ClientRequestSpecResult.length();
                }

                accessSpecResultList.add(new ClientRequestSpecResult(
                        binary.subList(position, tempLength)));
                LOGGER.debug(
                    "adding ClientRequestSpecResult to accessSpecResultList ");
                position += tempLength;
                atLeastOnce = true;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (accessSpecResultList.isEmpty()) {
            LOGGER.info(
                "encoded message does not contain parameter for optional accessSpecResultList");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("TID", ns);

        if (temp != null) {
            tID = new UnsignedByteArray_HEX(temp);
        }

        element.removeChild("TID", ns);

        //parameter - not choices - no special actions needed
        temp = element.getChild("SelectSpecID", ns);

        if (temp != null) {
            selectSpecID = new SelectSpecID(temp);
            LOGGER.info(
                "setting parameter selectSpecID for parameter TagReportData");
        }

        if (temp == null) {
            LOGGER.info(
                "TagReportData misses optional parameter of type selectSpecID");
        }

        element.removeChild("SelectSpecID", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("SpecIndex", ns);

        if (temp != null) {
            specIndex = new SpecIndex(temp);
            LOGGER.info(
                "setting parameter specIndex for parameter TagReportData");
        }

        if (temp == null) {
            LOGGER.info(
                "TagReportData misses optional parameter of type specIndex");
        }

        element.removeChild("SpecIndex", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("RfSpecID", ns);

        if (temp != null) {
            rfSpecID = new RfSpecID(temp);
            LOGGER.info(
                "setting parameter rfSpecID for parameter TagReportData");
        }

        if (temp == null) {
            LOGGER.info(
                "TagReportData misses optional parameter of type rfSpecID");
        }

        element.removeChild("RfSpecID", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("AntennaID", ns);

        if (temp != null) {
            antennaID = new AntennaID(temp);
            LOGGER.info(
                "setting parameter antennaID for parameter TagReportData");
        }

        if (temp == null) {
            LOGGER.info(
                "TagReportData misses optional parameter of type antennaID");
        }

        element.removeChild("AntennaID", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("PeakRSSI", ns);

        if (temp != null) {
            peakRSSI = new PeakRSSI(temp);
            LOGGER.info(
                "setting parameter peakRSSI for parameter TagReportData");
        }

        if (temp == null) {
            LOGGER.info(
                "TagReportData misses optional parameter of type peakRSSI");
        }

        element.removeChild("PeakRSSI", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("FirstSeenTimestampUTC", ns);

        if (temp != null) {
            firstSeenTimestampUTC = new FirstSeenTimestampUTC(temp);
            LOGGER.info(
                "setting parameter firstSeenTimestampUTC for parameter TagReportData");
        }

        if (temp == null) {
            LOGGER.info(
                "TagReportData misses optional parameter of type firstSeenTimestampUTC");
        }

        element.removeChild("FirstSeenTimestampUTC", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("LastSeenTimestampUTC", ns);

        if (temp != null) {
            lastSeenTimestampUTC = new LastSeenTimestampUTC(temp);
            LOGGER.info(
                "setting parameter lastSeenTimestampUTC for parameter TagReportData");
        }

        if (temp == null) {
            LOGGER.info(
                "TagReportData misses optional parameter of type lastSeenTimestampUTC");
        }

        element.removeChild("LastSeenTimestampUTC", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("TagSeenCount", ns);

        if (temp != null) {
            tagSeenCount = new TagSeenCount(temp);
            LOGGER.info(
                "setting parameter tagSeenCount for parameter TagReportData");
        }

        if (temp == null) {
            LOGGER.info(
                "TagReportData misses optional parameter of type tagSeenCount");
        }

        element.removeChild("TagSeenCount", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("AccessSpecID", ns);

        if (temp != null) {
            accessSpecID = new AccessSpecID(temp);
            LOGGER.info(
                "setting parameter accessSpecID for parameter TagReportData");
        }

        if (temp == null) {
            LOGGER.info(
                "TagReportData misses optional parameter of type accessSpecID");
        }

        element.removeChild("AccessSpecID", ns);

        //choices - must check all possible subtypes
        boolean found = false;
        LOGGER.debug("decoding choice type SelectSpecResult ");
        // try to get child for each possible subtype
        temp = element.getChild("GenaralSelectSpecResult", ns);

        if (temp != null) {
            selectSpecResult = new GenaralSelectSpecResult(temp);
            LOGGER.debug(
                " selectSpecResult instatiated to GenaralSelectSpecResult with");
            found = true;
        }

        element.removeChild("GenaralSelectSpecResult", ns);
        // try to get child for each possible subtype
        temp = element.getChild("CustomizedSelectSpecResult", ns);

        if (temp != null) {
            selectSpecResult = new CustomizedSelectSpecResult(temp);
            LOGGER.debug(
                " selectSpecResult instatiated to CustomizedSelectSpecResult with");
            found = true;
        }

        element.removeChild("CustomizedSelectSpecResult", ns);

        if (!found) {
            LOGGER.info(
                "TagReportData misses optional parameter of type selectSpecResultList");
        }

        //choices - must check all possible subtypes
        //list of Choice Type Parameter
        accessSpecResultList = new LinkedList<AccessSpecResult>();
        // for each possible subtype get all childs
        tempList = element.getChildren("HbReadSpecResult", ns);

        for (Element e : tempList) {
            accessSpecResultList.add(new HbReadSpecResult(e));
            LOGGER.debug("adding HbReadSpecResult to accessSpecResultList ");
            atLeastOnce = true;
        }

        element.removeChildren("HbReadSpecResult", ns);

        tempList = element.getChildren("HbCustomizedReadSpecResult", ns);

        for (Element e : tempList) {
            accessSpecResultList.add(new HbCustomizedReadSpecResult(e));
            LOGGER.debug(
                "adding HbCustomizedReadSpecResult to accessSpecResultList ");
            atLeastOnce = true;
        }

        element.removeChildren("HbCustomizedReadSpecResult", ns);

        tempList = element.getChildren("HbWriteSpecResult", ns);

        for (Element e : tempList) {
            accessSpecResultList.add(new HbWriteSpecResult(e));
            LOGGER.debug("adding HbWriteSpecResult to accessSpecResultList ");
            atLeastOnce = true;
        }

        element.removeChildren("HbWriteSpecResult", ns);

        tempList = element.getChildren("HbPrivateWriteSpecResult", ns);

        for (Element e : tempList) {
            accessSpecResultList.add(new HbPrivateWriteSpecResult(e));
            LOGGER.debug(
                "adding HbPrivateWriteSpecResult to accessSpecResultList ");
            atLeastOnce = true;
        }

        element.removeChildren("HbPrivateWriteSpecResult", ns);

        tempList = element.getChildren("ClientRequestSpecResult", ns);

        for (Element e : tempList) {
            accessSpecResultList.add(new ClientRequestSpecResult(e));
            LOGGER.debug(
                "adding ClientRequestSpecResult to accessSpecResultList ");
            atLeastOnce = true;
        }

        element.removeChildren("ClientRequestSpecResult", ns);

        if (!atLeastOnce) {
            LOGGER.info(
                "TagReportData misses optional parameter of type accessSpecResultList");
        }

        atLeastOnce = false;

        if (element.getChildren().size() > 0) {
            String message = "TagReportData has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set tID of type UnsignedByteArray_HEX .
    * @param  tID to be set
    */
    public void setTID(final UnsignedByteArray_HEX tID) {
        this.tID = tID;
    }

    /**
    * set selectSpecID of type SelectSpecID.
    * @param  selectSpecID to be set
    */
    public void setSelectSpecID(final SelectSpecID selectSpecID) {
        this.selectSpecID = selectSpecID;
    }

    /**
    * set specIndex of type SpecIndex.
    * @param  specIndex to be set
    */
    public void setSpecIndex(final SpecIndex specIndex) {
        this.specIndex = specIndex;
    }

    /**
    * set rfSpecID of type RfSpecID.
    * @param  rfSpecID to be set
    */
    public void setRfSpecID(final RfSpecID rfSpecID) {
        this.rfSpecID = rfSpecID;
    }

    /**
    * set antennaID of type AntennaID.
    * @param  antennaID to be set
    */
    public void setAntennaID(final AntennaID antennaID) {
        this.antennaID = antennaID;
    }

    /**
    * set peakRSSI of type PeakRSSI.
    * @param  peakRSSI to be set
    */
    public void setPeakRSSI(final PeakRSSI peakRSSI) {
        this.peakRSSI = peakRSSI;
    }

    /**
    * set firstSeenTimestampUTC of type FirstSeenTimestampUTC.
    * @param  firstSeenTimestampUTC to be set
    */
    public void setFirstSeenTimestampUTC(
        final FirstSeenTimestampUTC firstSeenTimestampUTC) {
        this.firstSeenTimestampUTC = firstSeenTimestampUTC;
    }

    /**
    * set lastSeenTimestampUTC of type LastSeenTimestampUTC.
    * @param  lastSeenTimestampUTC to be set
    */
    public void setLastSeenTimestampUTC(
        final LastSeenTimestampUTC lastSeenTimestampUTC) {
        this.lastSeenTimestampUTC = lastSeenTimestampUTC;
    }

    /**
    * set tagSeenCount of type TagSeenCount.
    * @param  tagSeenCount to be set
    */
    public void setTagSeenCount(final TagSeenCount tagSeenCount) {
        this.tagSeenCount = tagSeenCount;
    }

    /**
    * set accessSpecID of type AccessSpecID.
    * @param  accessSpecID to be set
    */
    public void setAccessSpecID(final AccessSpecID accessSpecID) {
        this.accessSpecID = accessSpecID;
    }

    /**
    * set selectSpecResult of type SelectSpecResult.
    * @param  selectSpecResult to be set
    */
    public void setSelectSpecResult(final SelectSpecResult selectSpecResult) {
        this.selectSpecResult = selectSpecResult;
    }

    /**
    * set accessSpecResultList of type  List &lt;AccessSpecResult>.
    * @param  accessSpecResultList to be set
    */
    public void setAccessSpecResultList(
        final List<AccessSpecResult> accessSpecResultList) {
        this.accessSpecResultList = accessSpecResultList;
    }

    // end setter

    //getters
    /**
    * get tID of type  UnsignedByteArray_HEX.
    * @return  UnsignedByteArray_HEX
    */
    public UnsignedByteArray_HEX getTID() {
        return tID;
    }

    /**
    * get selectSpecID of type SelectSpecID .
    * @return  SelectSpecID
    */
    public SelectSpecID getSelectSpecID() {
        return selectSpecID;
    }

    /**
    * get specIndex of type SpecIndex .
    * @return  SpecIndex
    */
    public SpecIndex getSpecIndex() {
        return specIndex;
    }

    /**
    * get rfSpecID of type RfSpecID .
    * @return  RfSpecID
    */
    public RfSpecID getRfSpecID() {
        return rfSpecID;
    }

    /**
    * get antennaID of type AntennaID .
    * @return  AntennaID
    */
    public AntennaID getAntennaID() {
        return antennaID;
    }

    /**
    * get peakRSSI of type PeakRSSI .
    * @return  PeakRSSI
    */
    public PeakRSSI getPeakRSSI() {
        return peakRSSI;
    }

    /**
    * get firstSeenTimestampUTC of type FirstSeenTimestampUTC .
    * @return  FirstSeenTimestampUTC
    */
    public FirstSeenTimestampUTC getFirstSeenTimestampUTC() {
        return firstSeenTimestampUTC;
    }

    /**
    * get lastSeenTimestampUTC of type LastSeenTimestampUTC .
    * @return  LastSeenTimestampUTC
    */
    public LastSeenTimestampUTC getLastSeenTimestampUTC() {
        return lastSeenTimestampUTC;
    }

    /**
    * get tagSeenCount of type TagSeenCount .
    * @return  TagSeenCount
    */
    public TagSeenCount getTagSeenCount() {
        return tagSeenCount;
    }

    /**
    * get accessSpecID of type AccessSpecID .
    * @return  AccessSpecID
    */
    public AccessSpecID getAccessSpecID() {
        return accessSpecID;
    }

    /**
    * get selectSpecResult of type SelectSpecResult .
    * @return  SelectSpecResult
    */
    public SelectSpecResult getSelectSpecResult() {
        return selectSpecResult;
    }

    /**
    * get accessSpecResultList of type List &lt;AccessSpecResult> .
    * @return  List &lt;AccessSpecResult>
    */
    public List<AccessSpecResult> getAccessSpecResultList() {
        return accessSpecResultList;
    }

    // end getters

    //add methods

    /**
    * add element accessSpecResult of type AccessSpecResult .
    * @param  accessSpecResult of type AccessSpecResult
    */
    public void addToAccessSpecResultList(AccessSpecResult accessSpecResult) {
        if (this.accessSpecResultList == null) {
            this.accessSpecResultList = new LinkedList<AccessSpecResult>();
        }

        this.accessSpecResultList.add(accessSpecResult);
    }

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "TagReportData";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "TagReportData: ";
        result += ", tID: ";
        result += tID;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
