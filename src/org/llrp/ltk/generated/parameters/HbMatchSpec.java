/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:16 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.interfaces.MatchSpec;
import org.llrp.ltk.generated.parameters.HbTargetTag;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class HbMatchSpec extends TLVParameter implements MatchSpec {
    public static final SignedShort TYPENUM = new SignedShort(453);
    private static final Logger LOGGER = Logger.getLogger(HbMatchSpec.class);
    protected List<HbTargetTag> hbTargetTagList = new LinkedList<HbTargetTag>();

    /**
     * empty constructor to create new parameter.
     */
    public HbMatchSpec() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public HbMatchSpec(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public HbMatchSpec(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (hbTargetTagList == null) {
            LOGGER.warn(" hbTargetTagList not set");

            //parameter has to be set - throw exception
            throw new MissingParameterException(" hbTargetTagList not set");
        } else {
            for (HbTargetTag field : hbTargetTagList) {
                resultBits.append(field.encodeBinary());
            }
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        //parameters
        if (hbTargetTagList == null) {
            LOGGER.warn(" hbTargetTagList not set");
            throw new MissingParameterException("  hbTargetTagList not set");
        }

        for (HbTargetTag field : hbTargetTagList) {
            element.addContent(field.encodeXML(field.getClass().getName()
                                                    .replaceAll(field.getClass()
                                                                     .getPackage()
                                                                     .getName() +
                        ".", ""), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;

        // list of parameters
        hbTargetTagList = new LinkedList<HbTargetTag>();
        LOGGER.debug("decoding parameter hbTargetTagList ");

        while (position < binary.length()) {
            // store if one parameter matched
            boolean atLeastOnce = false;

            // look ahead to see type
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }

            //add parameter to list if type number matches
            if ((type != null) && type.equals(HbTargetTag.TYPENUM)) {
                if (binary.get(position)) {
                    // length can statically be determined for TV Parameters
                    tempLength = HbTargetTag.length();
                }

                hbTargetTagList.add(new HbTargetTag(binary.subList(position,
                            tempLength)));
                LOGGER.debug("adding HbTargetTag to hbTargetTagList ");
                atLeastOnce = true;
                position += tempLength;
            }

            if (!atLeastOnce) {
                //no parameter matched therefore we jump out of the loop
                break;
            }
        }

        //if list is still empty no parameter matched
        if (hbTargetTagList.isEmpty()) {
            LOGGER.warn(
                "encoded message does not contain parameter for non optional hbTargetTagList");
            throw new MissingParameterException(
                "HbMatchSpec misses non optional parameter of type HbTargetTag");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        //parameter - not choices - no special actions needed
        //we expect a list of parameters
        hbTargetTagList = new LinkedList<HbTargetTag>();
        tempList = element.getChildren("HbTargetTag", ns);

        if ((tempList == null) || tempList.isEmpty()) {
            LOGGER.warn(
                "HbMatchSpec misses non optional parameter of type hbTargetTagList");
            throw new MissingParameterException(
                "HbMatchSpec misses non optional parameter of type hbTargetTagList");
        } else {
            for (Element e : tempList) {
                hbTargetTagList.add(new HbTargetTag(e));
                LOGGER.debug("adding HbTargetTag to hbTargetTagList ");
            }
        }

        element.removeChildren("HbTargetTag", ns);

        if (element.getChildren().size() > 0) {
            String message = "HbMatchSpec has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters

    /**
    * set hbTargetTagList of type  List &lt;HbTargetTag>.
    * @param  hbTargetTagList to be set
    */
    public void setHbTargetTagList(final List<HbTargetTag> hbTargetTagList) {
        this.hbTargetTagList = hbTargetTagList;
    }

    // end setter

    //getters

    /**
    * get hbTargetTagList of type List &lt;HbTargetTag> .
    * @return  List &lt;HbTargetTag>
    */
    public List<HbTargetTag> getHbTargetTagList() {
        return hbTargetTagList;
    }

    // end getters

    //add methods

    /**
    * add element hbTargetTag of type HbTargetTag .
    * @param  hbTargetTag of type HbTargetTag
    */
    public void addToHbTargetTagList(HbTargetTag hbTargetTag) {
        if (this.hbTargetTagList == null) {
            this.hbTargetTagList = new LinkedList<HbTargetTag>();
        }

        this.hbTargetTagList.add(hbTargetTag);
    }

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "HbMatchSpec";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "HbMatchSpec: ";
        result = result.replaceFirst(", ", "");

        return result;
    }
}
