/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:16 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.enumerations.HbBankType;
import org.llrp.ltk.generated.enumerations.HbReadType;
import org.llrp.ltk.generated.enumerations.HbSpecMemoryBankIDType;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class MemoryBank extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(409);
    private static final Logger LOGGER = Logger.getLogger(MemoryBank.class);
    protected HbSpecMemoryBankIDType memoryBankID;
    protected HbReadType readType;
    protected UnsignedShort pointer;
    protected UnsignedShort count;
    protected HbBankType bankType;

    /**
     * empty constructor to create new parameter.
     */
    public MemoryBank() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public MemoryBank(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public MemoryBank(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (memoryBankID == null) {
            LOGGER.warn(" memoryBankID not set");
            throw new MissingParameterException(
                " memoryBankID not set  for Parameter of Type MemoryBank");
        }

        resultBits.append(memoryBankID.encodeBinary());

        if (readType == null) {
            LOGGER.warn(" readType not set");
            throw new MissingParameterException(
                " readType not set  for Parameter of Type MemoryBank");
        }

        resultBits.append(readType.encodeBinary());

        if (pointer == null) {
            LOGGER.warn(" pointer not set");
            throw new MissingParameterException(
                " pointer not set  for Parameter of Type MemoryBank");
        }

        resultBits.append(pointer.encodeBinary());

        if (count == null) {
            LOGGER.warn(" count not set");
            throw new MissingParameterException(
                " count not set  for Parameter of Type MemoryBank");
        }

        resultBits.append(count.encodeBinary());

        if (bankType == null) {
            LOGGER.warn(" bankType not set");
            throw new MissingParameterException(
                " bankType not set  for Parameter of Type MemoryBank");
        }

        resultBits.append(bankType.encodeBinary());

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (memoryBankID == null) {
            LOGGER.warn(" memoryBankID not set");
            throw new MissingParameterException(" memoryBankID not set");
        } else {
            element.addContent(memoryBankID.encodeXML("MemoryBankID", ns));
        }

        if (readType == null) {
            LOGGER.warn(" readType not set");
            throw new MissingParameterException(" readType not set");
        } else {
            element.addContent(readType.encodeXML("ReadType", ns));
        }

        if (pointer == null) {
            LOGGER.warn(" pointer not set");
            throw new MissingParameterException(" pointer not set");
        } else {
            element.addContent(pointer.encodeXML("Pointer", ns));
        }

        if (count == null) {
            LOGGER.warn(" count not set");
            throw new MissingParameterException(" count not set");
        } else {
            element.addContent(count.encodeXML("Count", ns));
        }

        if (bankType == null) {
            LOGGER.warn(" bankType not set");
            throw new MissingParameterException(" bankType not set");
        } else {
            element.addContent(bankType.encodeXML("BankType", ns));
        }

        //parameters
        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        SignedShort type;
        int fieldCount;
        memoryBankID = new HbSpecMemoryBankIDType(binary.subList(position,
                    HbSpecMemoryBankIDType.length()));
        position += HbSpecMemoryBankIDType.length();
        readType = new HbReadType(binary.subList(position, HbReadType.length()));
        position += HbReadType.length();
        pointer = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length()));
        position += UnsignedShort.length();
        count = new UnsignedShort(binary.subList(position,
                    UnsignedShort.length()));
        position += UnsignedShort.length();
        bankType = new HbBankType(binary.subList(position, HbBankType.length()));
        position += HbBankType.length();
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("MemoryBankID", ns);

        if (temp != null) {
            memoryBankID = new HbSpecMemoryBankIDType(temp);
        }

        element.removeChild("MemoryBankID", ns);
        temp = element.getChild("ReadType", ns);

        if (temp != null) {
            readType = new HbReadType(temp);
        }

        element.removeChild("ReadType", ns);
        temp = element.getChild("Pointer", ns);

        if (temp != null) {
            pointer = new UnsignedShort(temp);
        }

        element.removeChild("Pointer", ns);
        temp = element.getChild("Count", ns);

        if (temp != null) {
            count = new UnsignedShort(temp);
        }

        element.removeChild("Count", ns);
        temp = element.getChild("BankType", ns);

        if (temp != null) {
            bankType = new HbBankType(temp);
        }

        element.removeChild("BankType", ns);

        if (element.getChildren().size() > 0) {
            String message = "MemoryBank has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set memoryBankID of type HbSpecMemoryBankIDType .
    * @param  memoryBankID to be set
    */
    public void setMemoryBankID(final HbSpecMemoryBankIDType memoryBankID) {
        this.memoryBankID = memoryBankID;
    }

    /**
    * set readType of type HbReadType .
    * @param  readType to be set
    */
    public void setReadType(final HbReadType readType) {
        this.readType = readType;
    }

    /**
    * set   pointer of type UnsignedShort .
    * @param   pointer to be set
    */
    public void setPointer(final UnsignedShort pointer) {
        this.pointer = pointer;
    }

    /**
    * set   count of type UnsignedShort .
    * @param   count to be set
    */
    public void setCount(final UnsignedShort count) {
        this.count = count;
    }

    /**
    * set bankType of type HbBankType .
    * @param  bankType to be set
    */
    public void setBankType(final HbBankType bankType) {
        this.bankType = bankType;
    }

    // end setter

    //getters
    /**
    * get memoryBankID of type HbSpecMemoryBankIDType.
    * @return  HbSpecMemoryBankIDType
    */
    public HbSpecMemoryBankIDType getMemoryBankID() {
        return memoryBankID;
    }

    /**
    * get readType of type HbReadType.
    * @return  HbReadType
    */
    public HbReadType getReadType() {
        return readType;
    }

    /**
    * get   pointer of type UnsignedShort.
    * @return   type UnsignedShort to be set
    */
    public UnsignedShort getPointer() {
        return this.pointer;
    }

    /**
    * get   count of type UnsignedShort.
    * @return   type UnsignedShort to be set
    */
    public UnsignedShort getCount() {
        return this.count;
    }

    /**
    * get bankType of type HbBankType.
    * @return  HbBankType
    */
    public HbBankType getBankType() {
        return bankType;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "MemoryBank";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "MemoryBank: ";
        result += ", memoryBankID: ";
        result += memoryBankID;
        result += ", readType: ";
        result += readType;
        result += ", pointer: ";
        result += pointer;
        result += ", count: ";
        result += count;
        result += ", bankType: ";
        result += bankType;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
