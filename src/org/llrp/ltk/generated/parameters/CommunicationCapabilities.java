/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:15 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.parameters.SupportRS232;
import org.llrp.ltk.generated.parameters.SupportRS485;
import org.llrp.ltk.types.Bit;
import org.llrp.ltk.types.BitList;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedByte;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class CommunicationCapabilities extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(352);
    private static final Logger LOGGER = Logger.getLogger(CommunicationCapabilities.class);
    protected Bit supportEthernet;
    protected Bit supportWIFI;
    protected Bit supportMobile;
    protected Bit supportUSB;
    protected Bit supportHttpLink;
    protected Bit supportIPV6;
    protected Bit supportSSL;
    protected BitList reserved0 = new BitList(1);
    protected UnsignedByte supportTcpLinkNum;
    protected SupportRS232 supportRS232;
    protected SupportRS485 supportRS485;

    /**
     * empty constructor to create new parameter.
     */
    public CommunicationCapabilities() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public CommunicationCapabilities(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public CommunicationCapabilities(Element element)
        throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (supportEthernet == null) {
            LOGGER.warn(" supportEthernet not set");
            throw new MissingParameterException(
                " supportEthernet not set  for Parameter of Type CommunicationCapabilities");
        }

        resultBits.append(supportEthernet.encodeBinary());

        if (supportWIFI == null) {
            LOGGER.warn(" supportWIFI not set");
            throw new MissingParameterException(
                " supportWIFI not set  for Parameter of Type CommunicationCapabilities");
        }

        resultBits.append(supportWIFI.encodeBinary());

        if (supportMobile == null) {
            LOGGER.warn(" supportMobile not set");
            throw new MissingParameterException(
                " supportMobile not set  for Parameter of Type CommunicationCapabilities");
        }

        resultBits.append(supportMobile.encodeBinary());

        if (supportUSB == null) {
            LOGGER.warn(" supportUSB not set");
            throw new MissingParameterException(
                " supportUSB not set  for Parameter of Type CommunicationCapabilities");
        }

        resultBits.append(supportUSB.encodeBinary());

        if (supportHttpLink == null) {
            LOGGER.warn(" supportHttpLink not set");
            throw new MissingParameterException(
                " supportHttpLink not set  for Parameter of Type CommunicationCapabilities");
        }

        resultBits.append(supportHttpLink.encodeBinary());

        if (supportIPV6 == null) {
            LOGGER.warn(" supportIPV6 not set");
            throw new MissingParameterException(
                " supportIPV6 not set  for Parameter of Type CommunicationCapabilities");
        }

        resultBits.append(supportIPV6.encodeBinary());

        if (supportSSL == null) {
            LOGGER.warn(" supportSSL not set");
            throw new MissingParameterException(
                " supportSSL not set  for Parameter of Type CommunicationCapabilities");
        }

        resultBits.append(supportSSL.encodeBinary());
        resultBits.append(reserved0.encodeBinary());

        if (supportTcpLinkNum == null) {
            LOGGER.warn(" supportTcpLinkNum not set");
            throw new MissingParameterException(
                " supportTcpLinkNum not set  for Parameter of Type CommunicationCapabilities");
        }

        resultBits.append(supportTcpLinkNum.encodeBinary());

        if (supportRS232 == null) {
            // optional parameter, may be null
            LOGGER.info(" supportRS232 not set");
        } else {
            resultBits.append(supportRS232.encodeBinary());
        }

        if (supportRS485 == null) {
            // optional parameter, may be null
            LOGGER.info(" supportRS485 not set");
        } else {
            resultBits.append(supportRS485.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (supportEthernet == null) {
            LOGGER.warn(" supportEthernet not set");
            throw new MissingParameterException(" supportEthernet not set");
        } else {
            element.addContent(supportEthernet.encodeXML("SupportEthernet", ns));
        }

        if (supportWIFI == null) {
            LOGGER.warn(" supportWIFI not set");
            throw new MissingParameterException(" supportWIFI not set");
        } else {
            element.addContent(supportWIFI.encodeXML("SupportWIFI", ns));
        }

        if (supportMobile == null) {
            LOGGER.warn(" supportMobile not set");
            throw new MissingParameterException(" supportMobile not set");
        } else {
            element.addContent(supportMobile.encodeXML("SupportMobile", ns));
        }

        if (supportUSB == null) {
            LOGGER.warn(" supportUSB not set");
            throw new MissingParameterException(" supportUSB not set");
        } else {
            element.addContent(supportUSB.encodeXML("SupportUSB", ns));
        }

        if (supportHttpLink == null) {
            LOGGER.warn(" supportHttpLink not set");
            throw new MissingParameterException(" supportHttpLink not set");
        } else {
            element.addContent(supportHttpLink.encodeXML("SupportHttpLink", ns));
        }

        if (supportIPV6 == null) {
            LOGGER.warn(" supportIPV6 not set");
            throw new MissingParameterException(" supportIPV6 not set");
        } else {
            element.addContent(supportIPV6.encodeXML("SupportIPV6", ns));
        }

        if (supportSSL == null) {
            LOGGER.warn(" supportSSL not set");
            throw new MissingParameterException(" supportSSL not set");
        } else {
            element.addContent(supportSSL.encodeXML("SupportSSL", ns));
        }

        //element.addContent(reserved0.encodeXML("reserved",ns));
        if (supportTcpLinkNum == null) {
            LOGGER.warn(" supportTcpLinkNum not set");
            throw new MissingParameterException(" supportTcpLinkNum not set");
        } else {
            element.addContent(supportTcpLinkNum.encodeXML(
                    "SupportTcpLinkNum", ns));
        }

        //parameters
        if (supportRS232 == null) {
            LOGGER.info("supportRS232 not set");
        } else {
            element.addContent(supportRS232.encodeXML(
                    supportRS232.getClass().getSimpleName(), ns));
        }

        if (supportRS485 == null) {
            LOGGER.info("supportRS485 not set");
        } else {
            element.addContent(supportRS485.encodeXML(
                    supportRS485.getClass().getSimpleName(), ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        supportEthernet = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        supportWIFI = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        supportMobile = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        supportUSB = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        supportHttpLink = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        supportIPV6 = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        supportSSL = new Bit(binary.subList(position, Bit.length()));
        position += Bit.length();
        position += reserved0.length();
        supportTcpLinkNum = new UnsignedByte(binary.subList(position,
                    UnsignedByte.length()));
        position += UnsignedByte.length();

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "CommunicationCapabilities misses optional parameter of type SupportRS232");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = supportRS232.length();
        }

        if ((type != null) && type.equals(SupportRS232.TYPENUM)) {
            supportRS232 = new SupportRS232(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " supportRS232 is instantiated with SupportRS232 with length" +
                tempLength);
        } else {
            LOGGER.info(
                "CommunicationCapabilities misses optional parameter of type SupportRS232");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "CommunicationCapabilities misses optional parameter of type SupportRS485");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = supportRS485.length();
        }

        if ((type != null) && type.equals(SupportRS485.TYPENUM)) {
            supportRS485 = new SupportRS485(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " supportRS485 is instantiated with SupportRS485 with length" +
                tempLength);
        } else {
            LOGGER.info(
                "CommunicationCapabilities misses optional parameter of type SupportRS485");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("SupportEthernet", ns);

        if (temp != null) {
            supportEthernet = new Bit(temp);
        }

        element.removeChild("SupportEthernet", ns);
        temp = element.getChild("SupportWIFI", ns);

        if (temp != null) {
            supportWIFI = new Bit(temp);
        }

        element.removeChild("SupportWIFI", ns);
        temp = element.getChild("SupportMobile", ns);

        if (temp != null) {
            supportMobile = new Bit(temp);
        }

        element.removeChild("SupportMobile", ns);
        temp = element.getChild("SupportUSB", ns);

        if (temp != null) {
            supportUSB = new Bit(temp);
        }

        element.removeChild("SupportUSB", ns);
        temp = element.getChild("SupportHttpLink", ns);

        if (temp != null) {
            supportHttpLink = new Bit(temp);
        }

        element.removeChild("SupportHttpLink", ns);
        temp = element.getChild("SupportIPV6", ns);

        if (temp != null) {
            supportIPV6 = new Bit(temp);
        }

        element.removeChild("SupportIPV6", ns);
        temp = element.getChild("SupportSSL", ns);

        if (temp != null) {
            supportSSL = new Bit(temp);
        }

        element.removeChild("SupportSSL", ns);
        temp = element.getChild("SupportTcpLinkNum", ns);

        if (temp != null) {
            supportTcpLinkNum = new UnsignedByte(temp);
        }

        element.removeChild("SupportTcpLinkNum", ns);

        //parameter - not choices - no special actions needed
        temp = element.getChild("SupportRS232", ns);

        if (temp != null) {
            supportRS232 = new SupportRS232(temp);
            LOGGER.info(
                "setting parameter supportRS232 for parameter CommunicationCapabilities");
        }

        if (temp == null) {
            LOGGER.info(
                "CommunicationCapabilities misses optional parameter of type supportRS232");
        }

        element.removeChild("SupportRS232", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("SupportRS485", ns);

        if (temp != null) {
            supportRS485 = new SupportRS485(temp);
            LOGGER.info(
                "setting parameter supportRS485 for parameter CommunicationCapabilities");
        }

        if (temp == null) {
            LOGGER.info(
                "CommunicationCapabilities misses optional parameter of type supportRS485");
        }

        element.removeChild("SupportRS485", ns);

        if (element.getChildren().size() > 0) {
            String message = "CommunicationCapabilities has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   supportEthernet of type Bit .
    * @param   supportEthernet to be set
    */
    public void setSupportEthernet(final Bit supportEthernet) {
        this.supportEthernet = supportEthernet;
    }

    /**
    * set   supportWIFI of type Bit .
    * @param   supportWIFI to be set
    */
    public void setSupportWIFI(final Bit supportWIFI) {
        this.supportWIFI = supportWIFI;
    }

    /**
    * set   supportMobile of type Bit .
    * @param   supportMobile to be set
    */
    public void setSupportMobile(final Bit supportMobile) {
        this.supportMobile = supportMobile;
    }

    /**
    * set   supportUSB of type Bit .
    * @param   supportUSB to be set
    */
    public void setSupportUSB(final Bit supportUSB) {
        this.supportUSB = supportUSB;
    }

    /**
    * set   supportHttpLink of type Bit .
    * @param   supportHttpLink to be set
    */
    public void setSupportHttpLink(final Bit supportHttpLink) {
        this.supportHttpLink = supportHttpLink;
    }

    /**
    * set   supportIPV6 of type Bit .
    * @param   supportIPV6 to be set
    */
    public void setSupportIPV6(final Bit supportIPV6) {
        this.supportIPV6 = supportIPV6;
    }

    /**
    * set   supportSSL of type Bit .
    * @param   supportSSL to be set
    */
    public void setSupportSSL(final Bit supportSSL) {
        this.supportSSL = supportSSL;
    }

    /**
    * set   supportTcpLinkNum of type UnsignedByte .
    * @param   supportTcpLinkNum to be set
    */
    public void setSupportTcpLinkNum(final UnsignedByte supportTcpLinkNum) {
        this.supportTcpLinkNum = supportTcpLinkNum;
    }

    /**
    * set supportRS232 of type SupportRS232.
    * @param  supportRS232 to be set
    */
    public void setSupportRS232(final SupportRS232 supportRS232) {
        this.supportRS232 = supportRS232;
    }

    /**
    * set supportRS485 of type SupportRS485.
    * @param  supportRS485 to be set
    */
    public void setSupportRS485(final SupportRS485 supportRS485) {
        this.supportRS485 = supportRS485;
    }

    // end setter

    //getters
    /**
    * get   supportEthernet of type Bit.
    * @return   type Bit to be set
    */
    public Bit getSupportEthernet() {
        return this.supportEthernet;
    }

    /**
    * get   supportWIFI of type Bit.
    * @return   type Bit to be set
    */
    public Bit getSupportWIFI() {
        return this.supportWIFI;
    }

    /**
    * get   supportMobile of type Bit.
    * @return   type Bit to be set
    */
    public Bit getSupportMobile() {
        return this.supportMobile;
    }

    /**
    * get   supportUSB of type Bit.
    * @return   type Bit to be set
    */
    public Bit getSupportUSB() {
        return this.supportUSB;
    }

    /**
    * get   supportHttpLink of type Bit.
    * @return   type Bit to be set
    */
    public Bit getSupportHttpLink() {
        return this.supportHttpLink;
    }

    /**
    * get   supportIPV6 of type Bit.
    * @return   type Bit to be set
    */
    public Bit getSupportIPV6() {
        return this.supportIPV6;
    }

    /**
    * get   supportSSL of type Bit.
    * @return   type Bit to be set
    */
    public Bit getSupportSSL() {
        return this.supportSSL;
    }

    /**
    * get   supportTcpLinkNum of type UnsignedByte.
    * @return   type UnsignedByte to be set
    */
    public UnsignedByte getSupportTcpLinkNum() {
        return this.supportTcpLinkNum;
    }

    /**
    * get supportRS232 of type SupportRS232 .
    * @return  SupportRS232
    */
    public SupportRS232 getSupportRS232() {
        return supportRS232;
    }

    /**
    * get supportRS485 of type SupportRS485 .
    * @return  SupportRS485
    */
    public SupportRS485 getSupportRS485() {
        return supportRS485;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "CommunicationCapabilities";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "CommunicationCapabilities: ";
        result += ", supportEthernet: ";
        result += supportEthernet;
        result += ", supportWIFI: ";
        result += supportWIFI;
        result += ", supportMobile: ";
        result += supportMobile;
        result += ", supportUSB: ";
        result += supportUSB;
        result += ", supportHttpLink: ";
        result += supportHttpLink;
        result += ", supportIPV6: ";
        result += supportIPV6;
        result += ", supportSSL: ";
        result += supportSSL;

        result += ", supportTcpLinkNum: ";
        result += supportTcpLinkNum;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
