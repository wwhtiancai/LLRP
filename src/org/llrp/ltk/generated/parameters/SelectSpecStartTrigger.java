/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit
 * for more information
 * Generated on: Mon Apr 10 16:16:16 CST 2017;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import org.apache.log4j.Logger;

import org.jdom.Content;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.generated.enumerations.SelectSpecStartTriggerType;
import org.llrp.ltk.generated.parameters.GPITrigger;
import org.llrp.ltk.generated.parameters.PeriodicTrigger;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 *

See also

 */

/**
 *

See also
      .
 */
public class SelectSpecStartTrigger extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(401);
    private static final Logger LOGGER = Logger.getLogger(SelectSpecStartTrigger.class);
    protected SelectSpecStartTriggerType selectSpecStartTriggerType;
    protected PeriodicTrigger periodicTrigger;
    protected GPITrigger gPITrigger;

    /**
     * empty constructor to create new parameter.
     */
    public SelectSpecStartTrigger() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public SelectSpecStartTrigger(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public SelectSpecStartTrigger(Element element)
        throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (selectSpecStartTriggerType == null) {
            LOGGER.warn(" selectSpecStartTriggerType not set");
            throw new MissingParameterException(
                " selectSpecStartTriggerType not set  for Parameter of Type SelectSpecStartTrigger");
        }

        resultBits.append(selectSpecStartTriggerType.encodeBinary());

        if (periodicTrigger == null) {
            // optional parameter, may be null
            LOGGER.info(" periodicTrigger not set");
        } else {
            resultBits.append(periodicTrigger.encodeBinary());
        }

        if (gPITrigger == null) {
            // optional parameter, may be null
            LOGGER.info(" gPITrigger not set");
        } else {
            resultBits.append(gPITrigger.encodeBinary());
        }

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("", LLRPConstants.LLRPNAMESPACE);

        if (selectSpecStartTriggerType == null) {
            LOGGER.warn(" selectSpecStartTriggerType not set");
            throw new MissingParameterException(
                " selectSpecStartTriggerType not set");
        } else {
            element.addContent(selectSpecStartTriggerType.encodeXML(
                    "SelectSpecStartTriggerType", ns));
        }

        //parameters
        if (periodicTrigger == null) {
            LOGGER.info("periodicTrigger not set");
        } else {
            element.addContent(periodicTrigger.encodeXML(
                    periodicTrigger.getClass().getSimpleName(), ns));
        }

        if (gPITrigger == null) {
            LOGGER.info("gPITrigger not set");
        } else {
            element.addContent(gPITrigger.encodeXML(gPITrigger.getClass()
                                                              .getSimpleName(),
                    ns));
        }

        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0 + TYPENUMBERLENGTH + PARAMETERTYPELENGTH; //change by wuwh 
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        selectSpecStartTriggerType = new SelectSpecStartTriggerType(binary.subList(
                    position, SelectSpecStartTriggerType.length()));
        position += SelectSpecStartTriggerType.length();

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "SelectSpecStartTrigger misses optional parameter of type PeriodicTrigger");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = periodicTrigger.length();
        }

        if ((type != null) && type.equals(PeriodicTrigger.TYPENUM)) {
            periodicTrigger = new PeriodicTrigger(binary.subList(position,
                        tempLength));
            position += tempLength;
            LOGGER.debug(
                " periodicTrigger is instantiated with PeriodicTrigger with length" +
                tempLength);
        } else {
            LOGGER.info(
                "SelectSpecStartTrigger misses optional parameter of type PeriodicTrigger");
        }

        // look ahead to see type
        // may be optional or exactly once
        type = null;
        tempByteLength = 0;
        tempLength = 0;

        try {
            // if first bit is one it is a TV Parameter
            if (binary.get(position)) {
                // do not take the first bit as it is always 1
                type = new SignedShort(binary.subList(position + 1, 7));
            } else {
                type = new SignedShort(binary.subList(position,
                            PARAMETERTYPELENGTH)); //change by wuwh
                tempByteLength = new UnsignedShort(binary.subList(position +
                            PARAMETERTYPELENGTH, UnsignedShort.length())).toShort(); //change by wuwh	
                tempLength = 8 * (tempByteLength + 4); //change by wuwh
            }
        } catch (IllegalArgumentException le) {
            // if an IllegalArgumentException is thrown, list was not long enough so the parameter is missing
            LOGGER.info(
                "SelectSpecStartTrigger misses optional parameter of type GPITrigger");
        }

        if (binary.get(position)) {
            // length can statically be determined for TV Parameters
            tempLength = gPITrigger.length();
        }

        if ((type != null) && type.equals(GPITrigger.TYPENUM)) {
            gPITrigger = new GPITrigger(binary.subList(position, tempLength));
            position += tempLength;
            LOGGER.debug(
                " gPITrigger is instantiated with GPITrigger with length" +
                tempLength);
        } else {
            LOGGER.info(
                "SelectSpecStartTrigger misses optional parameter of type GPITrigger");
        }
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("SelectSpecStartTriggerType", ns);

        if (temp != null) {
            selectSpecStartTriggerType = new SelectSpecStartTriggerType(temp);
        }

        element.removeChild("SelectSpecStartTriggerType", ns);

        //parameter - not choices - no special actions needed
        temp = element.getChild("PeriodicTrigger", ns);

        if (temp != null) {
            periodicTrigger = new PeriodicTrigger(temp);
            LOGGER.info(
                "setting parameter periodicTrigger for parameter SelectSpecStartTrigger");
        }

        if (temp == null) {
            LOGGER.info(
                "SelectSpecStartTrigger misses optional parameter of type periodicTrigger");
        }

        element.removeChild("PeriodicTrigger", ns);
        //parameter - not choices - no special actions needed
        temp = element.getChild("GPITrigger", ns);

        if (temp != null) {
            gPITrigger = new GPITrigger(temp);
            LOGGER.info(
                "setting parameter gPITrigger for parameter SelectSpecStartTrigger");
        }

        if (temp == null) {
            LOGGER.info(
                "SelectSpecStartTrigger misses optional parameter of type gPITrigger");
        }

        element.removeChild("GPITrigger", ns);

        if (element.getChildren().size() > 0) {
            String message = "SelectSpecStartTrigger has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set selectSpecStartTriggerType of type SelectSpecStartTriggerType .
    * @param  selectSpecStartTriggerType to be set
    */
    public void setSelectSpecStartTriggerType(
        final SelectSpecStartTriggerType selectSpecStartTriggerType) {
        this.selectSpecStartTriggerType = selectSpecStartTriggerType;
    }

    /**
    * set periodicTrigger of type PeriodicTrigger.
    * @param  periodicTrigger to be set
    */
    public void setPeriodicTrigger(final PeriodicTrigger periodicTrigger) {
        this.periodicTrigger = periodicTrigger;
    }

    /**
    * set gPITrigger of type GPITrigger.
    * @param  gPITrigger to be set
    */
    public void setGPITrigger(final GPITrigger gPITrigger) {
        this.gPITrigger = gPITrigger;
    }

    // end setter

    //getters
    /**
    * get selectSpecStartTriggerType of type SelectSpecStartTriggerType.
    * @return  SelectSpecStartTriggerType
    */
    public SelectSpecStartTriggerType getSelectSpecStartTriggerType() {
        return selectSpecStartTriggerType;
    }

    /**
    * get periodicTrigger of type PeriodicTrigger .
    * @return  PeriodicTrigger
    */
    public PeriodicTrigger getPeriodicTrigger() {
        return periodicTrigger;
    }

    /**
    * get gPITrigger of type GPITrigger .
    * @return  GPITrigger
    */
    public GPITrigger getGPITrigger() {
        return gPITrigger;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "SelectSpecStartTrigger";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "SelectSpecStartTrigger: ";
        result += ", selectSpecStartTriggerType: ";
        result += selectSpecStartTriggerType;
        result = result.replaceFirst(", ", "");

        return result;
    }
}
